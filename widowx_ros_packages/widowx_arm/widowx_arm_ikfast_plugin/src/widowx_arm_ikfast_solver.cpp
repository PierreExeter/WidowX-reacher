/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2017-06-06 13:31:40.410634
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27;
x0=IKcos(j[0]);
x1=IKsin(j[1]);
x2=IKcos(j[2]);
x3=IKcos(j[1]);
x4=IKsin(j[2]);
x5=IKcos(j[3]);
x6=IKsin(j[0]);
x7=IKsin(j[3]);
x8=IKcos(j[4]);
x9=IKsin(j[4]);
x10=((0.04825)*x3);
x11=((0.14203)*x4);
x12=((1.0)*x0);
x13=((1.0)*x7);
x14=((0.0715)*x2);
x15=((0.14203)*x1);
x16=((0.0715)*x0);
x17=((0.0715)*x6);
x18=((2.0e-7)*x6);
x19=((1.0)*x6);
x20=((2.0e-7)*x0);
x21=((1.0)*x5);
x22=(x1*x4);
x23=(x1*x2);
x24=(x1*x6);
x25=(x2*x3);
x26=(x3*x4);
x27=(x0*x1);
IkReal x28=((1.0)*x16);
IkReal x29=((1.0)*x27);
eetrans[0]=(((x0*x15))+((x0*x10))+(((0.14203)*x0*x25))+((x7*(((((-1.0)*x14*x29))+(((-1.0)*x26*x28))))))+(((-1.0)*x11*x29))+((x20*x23))+((x20*x26))+((x5*(((((-1.0)*x22*x28))+((x0*x14*x3)))))));
IkReal x30=((1.0)*x17);
IkReal x31=((1.0)*x24);
eetrans[1]=(((x18*x23))+((x18*x26))+(((-1.0)*x11*x31))+((x7*(((((-1.0)*x26*x30))+(((-1.0)*x14*x31))))))+((x10*x6))+((x5*(((((-1.0)*x22*x30))+((x14*x3*x6))))))+(((0.14203)*x25*x6))+((x15*x6)));
IkReal x32=((1.0)*x3);
eetrans[2]=((0.125)+(((2.0e-7)*x25))+((x7*(((((0.0715)*x22))+(((-1.0)*x14*x32))))))+(((0.14203)*x3))+(((-1.0)*x11*x32))+(((-2.0e-7)*x22))+((x5*(((((-1.0)*x1*x14))+(((-0.0715)*x26))))))+(((-1.0)*x15*x2))+(((-0.04825)*x1)));
eerot[0]=(((x6*x9))+(((-1.0)*x8*((((x13*((((x12*x26))+((x12*x23))))))+((x21*((((x0*x22))+(((-1.0)*x12*x25)))))))))));
eerot[1]=((((-1.0)*x12*x9))+(((-1.0)*x8*((((x21*((((x22*x6))+(((-1.0)*x19*x25))))))+((x13*((((x19*x26))+((x19*x23)))))))))));
eerot[2]=((-1.0)*x8*((((x21*((x26+x23))))+((x13*(((((-1.0)*x22))+(((1.0)*x25)))))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 5; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x56000007; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

r00 = eerot[0];
r01 = eerot[1];
r02 = eerot[2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];
new_r00=r00;
new_px=px;
new_r01=r01;
new_py=py;
new_r02=r02;
new_pz=((-0.125)+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; px = new_px; py = new_py; pz = new_pz;

pp=((px*px)+(py*py)+(pz*pz));
{
IkReal j0eval[1];
j0eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j0]

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x34 = IKatan2WithCheck(IkReal(((-1.0)*py)),IkReal(px),IKFAST_ATAN2_MAGTHRESH);
if(!x34.valid){
continue;
}
IkReal x33=x34.value;
j0array[0]=((-1.0)*x33);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x33)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

IkReal op[4+1], zeror[4];
int numroots;
op[0]=((((-1.0)*(pz*pz*pz*pz)*(r01*r01)*(sj0*sj0)))+(((-0.56812)*r01*r02*(py*py*py)*(sj0*sj0)))+(((-1.70436)*cj0*px*r01*r02*sj0*(py*py)))+(((0.56812)*pz*(cj0*cj0)*(px*px)*(r00*r00)))+(((-4.0)*py*r00*r01*(cj0*cj0)*(px*px*px)))+(((0.19114141719984)*py*pz*r01*r02*(sj0*sj0)))+(((0.00158175260252272)*py*r01*r02))+(((-12.0)*cj0*r00*r01*sj0*(px*px)*(py*py)))+(((-4.0)*(px*px)*(pz*pz)*(r00*r00)))+(((-0.193)*cj0*px*(pz*pz)*(r02*r02)))+(((0.56812)*pz*(py*py)*(r02*r02)))+(((0.00053734818750772)*py*sj0*(r01*r01)))+(((0.0019733285)*pz*r01*r02*sj0))+(((0.56812)*cj0*r00*r02*sj0*(py*py*py)))+(((-0.05482358)*cj0*px*pz*(r00*r00)))+(((0.386)*pz*r01*r02*sj0*(px*px)))+(((-0.579)*px*r00*r01*sj0*(py*py)))+(((-0.15024341719984)*py*pz*r01*r02))+(((-0.05482358)*py*pz*sj0*(r02*r02)))+(((-12.0)*cj0*px*pz*r01*r02*sj0*(py*py)))+(((-0.00143598031249228)*cj0*px*(r02*r02)))+(((-0.193)*cj0*py*r00*r01*(pz*pz)))+(((0.01113674999984)*px*py*r00*r01*(sj0*sj0)))+(((2.0)*(cj0*cj0)*(px*px)*(pz*pz)*(r00*r00)))+(((4.0)*py*r01*r02*(pz*pz*pz)*(sj0*sj0)))+(((-0.00556837499992)*(px*px)*(r01*r01)*(sj0*sj0)))+(((-0.05482358)*cj0*py*pz*r00*r01))+(((-0.05482358)*px*pz*r00*r01*sj0))+(((-7.75170003456103e-6)*(cj0*cj0)*(r00*r00)))+(((4.0)*cj0*pz*r00*r02*sj0*(py*py*py)))+(((4.0)*px*py*r00*r01*(cj0*cj0)*(pz*pz)))+(((1.70436)*py*r01*r02*(pz*pz)*(sj0*sj0)))+(((4.0)*cj0*px*py*sj0*(pz*pz)*(r00*r00)))+(((-0.00556837499992)*(cj0*cj0)*(py*py)*(r00*r00)))+(((-1.55034000691221e-5)*cj0*r00*r01*sj0))+(((-8.0)*cj0*px*py*sj0*(pz*pz)*(r02*r02)))+(((0.00422699033747728)*py*r01*r02*(sj0*sj0)))+(((4.0)*cj0*px*r01*r02*sj0*(pz*pz*pz)))+(((0.386)*cj0*pz*r00*r02*(py*py)))+(((-0.193)*px*r00*r01*sj0*(pz*pz)))+(((-2.0)*(px*px)*(py*py)*(r02*r02)))+(((-8.0)*px*py*r00*r01*(pz*pz)))+(((-0.193)*cj0*(px*px*px)*(r02*r02)))+(((0.56812)*r01*r02*(py*py*py)))+(((-1.13624)*pz*(cj0*cj0)*(px*px)*(r02*r02)))+(((0.56812)*cj0*r01*r02*sj0*(px*px*px)))+(((-0.00422699033747728)*pz*(r01*r01)*(sj0*sj0)))+(((-0.09557070859992)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((4.0)*px*pz*r00*r02*(cj0*cj0)*(py*py)))+(((0.193)*cj0*px*(py*py)*(r00*r00)))+(((0.19114141719984)*cj0*py*pz*r00*r02*sj0))+(((4.0)*px*r00*r01*(cj0*cj0)*(py*py*py)))+(((4.0)*pz*r01*r02*(py*py*py)))+(((-0.00931224999984)*(py*py)*(r01*r01)))+(((-1.0)*(cj0*cj0)*(pz*pz*pz*pz)*(r00*r00)))+(((-0.00422699033747728)*pz*(cj0*cj0)*(r00*r00)))+(((-1.13624)*cj0*r00*r01*sj0*(pz*pz*pz)))+(((-0.09557070859992)*(cj0*cj0)*(pz*pz)*(r00*r00)))+(((-0.05482358)*cj0*px*pz*(r02*r02)))+(((-4.0)*(cj0*cj0)*(px*px)*(pz*pz)*(r02*r02)))+(((-2.0)*(px*px)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((-4.0)*py*r01*r02*(pz*pz*pz)))+(((0.00053734818750772)*cj0*px*(r00*r00)))+(((-2.27248)*px*py*pz*r00*r01))+(((1.13624)*cj0*px*py*pz*sj0*(r01*r01)))+(((-0.386)*cj0*px*py*pz*r01*r02))+(((2.0)*cj0*r00*r01*sj0*(py*py*py*py)))+(((0.56812)*py*r01*r02*(px*px)*(sj0*sj0)))+(((-1.70436)*px*r00*r02*(pz*pz)))+(((-1.0)*(cj0*cj0)*(px*px*px*px)*(r00*r00)))+(((-0.19114141719984)*cj0*r00*r01*sj0*(pz*pz)))+(((2.0)*(cj0*cj0)*(px*px)*(py*py)*(r00*r00)))+(((-1.0)*(py*py*py*py)*(r01*r01)*(sj0*sj0)))+(((0.00158175260252272)*pz*(r02*r02)))+(((4.0)*py*pz*r01*r02*(px*px)))+(((-0.1800046672)*cj0*px*py*sj0*(r02*r02)))+(((-0.56812)*pz*(px*px)*(r01*r01)*(sj0*sj0)))+(((0.01113674999984)*cj0*px*py*sj0*(r00*r00)))+(((1.13624)*cj0*px*py*pz*sj0*(r00*r00)))+(((0.00158175260252272)*px*r00*r02))+(((-1.70436)*py*r01*r02*(pz*pz)))+(((0.193)*py*sj0*(px*px)*(r01*r01)))+(((0.00556837499992)*(py*py)*(r01*r01)*(sj0*sj0)))+(((4.0)*cj0*px*sj0*(py*py*py)*(r00*r00)))+(((-0.05482358)*px*py*r00*r02*sj0))+(((-0.05482358)*py*pz*sj0*(r01*r01)))+(((4.0)*cj0*px*py*sj0*(pz*pz)*(r01*r01)))+(((0.56812)*pz*(py*py)*(r01*r01)*(sj0*sj0)))+(((4.0)*pz*r00*r02*(px*px*px)))+(((-8.0)*px*pz*r00*r02*(py*py)*(sj0*sj0)))+(((-2.0)*cj0*r00*r01*sj0*(pz*pz*pz*pz)))+(((0.06580945860008)*(py*py)*(r02*r02)))+(((-0.193)*cj0*px*(pz*pz)*(r00*r00)))+(((-4.0)*(py*py)*(pz*pz)*(r02*r02)*(sj0*sj0)))+(((0.56812)*py*r01*r02*(px*px)))+(((-4.0)*(cj0*cj0)*(px*px)*(py*py)*(r01*r01)))+(((-0.00931224999984)*(px*px)*(r00*r00)))+(((0.19114141719984)*cj0*px*pz*r01*r02*sj0))+(((-1.0)*(cj0*cj0)*(py*py*py*py)*(r00*r00)))+(((-0.00143598031249228)*py*sj0*(r02*r02)))+(((-0.56812)*pz*(cj0*cj0)*(py*py)*(r00*r00)))+(((-1.13624)*px*r00*r02*(py*py)*(sj0*sj0)))+(((1.13624)*px*py*pz*r00*r01*(sj0*sj0)))+(((-8.0)*py*pz*r01*r02*(cj0*cj0)*(px*px)))+(((0.00556837499992)*(cj0*cj0)*(px*px)*(r00*r00)))+(((0.00422699033747728)*cj0*px*r01*r02*sj0))+(((0.56812)*px*r00*r02*(cj0*cj0)*(py*py)))+(((2.0)*(px*px)*(pz*pz)*(r02*r02)))+(((-4.0)*cj0*px*sj0*(py*py*py)*(r01*r01)))+(((-1.13624)*pz*(py*py)*(r02*r02)*(sj0*sj0)))+(((0.000280271846855)*r01*r02*sj0))+(((-0.193)*cj0*px*(py*py)*(r02*r02)))+(((-0.386)*px*py*pz*r00*r02*sj0))+(((-0.386)*cj0*px*(py*py)*(r01*r01)))+(((0.00053734818750772)*cj0*py*r00*r01))+(((-1.0)*(py*py*py*py)*(r02*r02)))+(((-0.193)*cj0*(px*px*px)*(r00*r00)))+(((-0.579)*cj0*py*r00*r01*(px*px)))+(((0.19114141719984)*px*pz*r00*r02*(cj0*cj0)))+(((-0.56812)*(cj0*cj0)*(pz*pz*pz)*(r00*r00)))+(((2.0)*cj0*r00*r01*sj0*(px*px*px*px)))+(((-0.56812)*r00*r02*(cj0*cj0)*(px*px*px)))+(((-2.0)*(cj0*cj0)*(py*py)*(pz*pz)*(r00*r00)))+(((0.56812)*px*r00*r02*(py*py)))+(((-0.193)*py*sj0*(pz*pz)*(r02*r02)))+(((-0.07512170859992)*(pz*pz)*(r02*r02)))+(((-0.386)*py*sj0*(px*px)*(r00*r00)))+(((0.000357149629787039)*(r02*r02)))+(((-4.0)*pz*r01*r02*(py*py*py)*(sj0*sj0)))+(((-4.0)*(py*py)*(pz*pz)*(r01*r01)))+(((-1.0)*(pz*pz*pz*pz)*(r02*r02)))+(((0.56812)*pz*(px*px)*(r02*r02)))+(((0.01113674999984)*cj0*px*py*sj0*(r01*r01)))+(((4.0)*cj0*pz*r01*r02*sj0*(px*px*px)))+(((-4.0)*px*r00*r02*(pz*pz*pz)))+(((1.70436)*cj0*px*r01*r02*sj0*(pz*pz)))+(((0.56812)*r00*r02*(px*px*px)))+(((-1.0)*(px*px*px*px)*(r01*r01)*(sj0*sj0)))+(((0.05482358)*cj0*r00*r02*(py*py)))+(((4.0)*px*r00*r02*(cj0*cj0)*(pz*pz*pz)))+(((-1.13624)*pz*(px*px)*(r00*r00)))+(((4.0)*px*py*r00*r01*(pz*pz)*(sj0*sj0)))+(((0.01113674999984)*px*py*r00*r01*(cj0*cj0)))+(((4.0)*cj0*py*r00*r02*sj0*(pz*pz*pz)))+(((0.00422699033747728)*px*r00*r02*(cj0*cj0)))+(((0.000280271846855)*cj0*r00*r02))+(((0.193)*cj0*r00*r01*(py*py*py)))+(((0.00053734818750772)*px*r00*r01*sj0))+(((0.06580945860008)*(px*px)*(r02*r02)))+(((-1.70436)*cj0*py*r00*r02*sj0*(px*px)))+(((-0.00845398067495455)*cj0*pz*r00*r01*sj0))+(((4.0)*py*r00*r01*(px*px*px)*(sj0*sj0)))+(((-2.27248)*cj0*px*py*pz*sj0*(r02*r02)))+(((1.70436)*px*r00*r02*(cj0*cj0)*(pz*pz)))+(((-0.0900023336)*(cj0*cj0)*(px*px)*(r02*r02)))+(((-0.193)*py*sj0*(px*px)*(r02*r02)))+(((4.0)*px*pz*r00*r02*(py*py)))+(((2.0)*(py*py)*(pz*pz)*(r02*r02)))+(((-0.56812)*(pz*pz*pz)*(r02*r02)))+(((1.13624)*px*py*pz*r00*r01*(cj0*cj0)))+(((-0.05482358)*cj0*px*py*r01*r02))+(((-1.13624)*py*r01*r02*(cj0*cj0)*(px*px)))+(((2.0)*(py*py)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((-4.0)*pz*r00*r02*(cj0*cj0)*(px*px*px)))+(((0.193)*r00*r01*sj0*(px*px*px)))+(((-4.0)*px*r00*r01*(py*py*py)*(sj0*sj0)))+(((-0.56812)*(pz*pz*pz)*(r01*r01)*(sj0*sj0)))+(((-4.0)*(px*px)*(py*py)*(r00*r00)*(sj0*sj0)))+(((-12.0)*cj0*py*pz*r00*r02*sj0*(px*px)))+(((0.00422699033747728)*cj0*py*r00*r02*sj0))+(((1.70436)*cj0*py*r00*r02*sj0*(pz*pz)))+(((-0.01862449999968)*px*py*r00*r01))+(((-0.193)*sj0*(py*py*py)*(r02*r02)))+(((2.0)*(px*px)*(py*py)*(r01*r01)*(sj0*sj0)))+(((-4.0)*cj0*py*sj0*(px*px*px)*(r00*r00)))+(((4.0)*py*pz*r01*r02*(px*px)*(sj0*sj0)))+(((0.05482358)*r01*r02*sj0*(px*px)))+(((-0.15024341719984)*px*pz*r00*r02))+(((-0.193)*py*sj0*(pz*pz)*(r01*r01)))+(((-1.0)*(px*px*px*px)*(r02*r02)))+(((0.0019733285)*cj0*pz*r00*r02))+(((-1.13624)*pz*(py*py)*(r01*r01)))+(((-0.0900023336)*(py*py)*(r02*r02)*(sj0*sj0)))+(((-7.75170003456103e-6)*(r01*r01)*(sj0*sj0)))+(((4.0)*cj0*py*sj0*(px*px*px)*(r01*r01)))+(((-0.193)*sj0*(py*py*py)*(r01*r01))));
op[1]=((((-0.386)*r01*r02*(py*py*py)*(sj0*sj0)))+(((0.21929432)*px*py*r00*r01*(sj0*sj0)))+(((0.21929432)*px*pz*r00*r02*(cj0*cj0)))+(((0.00287196062498456)*cj0*px*r01*r02*sj0))+(((2.27248)*px*py*pz*r00*r02*sj0))+(((-0.00316350520504545)*py*sj0*(r01*r01)))+(((0.21929432)*cj0*px*py*sj0*(r00*r00)))+(((-2.27248)*pz*r01*r02*sj0*(px*px)))+(((-0.10964716)*(cj0*cj0)*(py*py)*(r00*r00)))+(((-0.21929432)*py*pz*r01*r02))+(((0.00287196062498456)*cj0*py*r00*r02*sj0))+(((0.00107469637501544)*py*r01*r02))+(((1.13624)*cj0*(px*px*px)*(r00*r00)))+(((0.2855113344)*cj0*py*pz*r00*r01))+(((0.386)*pz*(py*py)*(r02*r02)))+(((-0.00316350520504545)*px*r00*r01*sj0))+(((0.00845398067495455)*cj0*px*(r02*r02)))+(((-1.13624)*py*sj0*(px*px)*(r01*r01)))+(((1.13624)*cj0*(px*px*px)*(r02*r02)))+(((0.2855113344)*py*pz*sj0*(r02*r02)))+(((-1.158)*px*r00*r02*(pz*pz)))+(((1.158)*cj0*py*r00*r02*sj0*(pz*pz)))+(((-0.00287196062498456)*pz*(r01*r01)*(sj0*sj0)))+(((-1.158)*cj0*px*r01*r02*sj0*(py*py)))+(((-0.386)*pz*(cj0*cj0)*(py*py)*(r00*r00)))+(((-0.386)*(pz*pz*pz)*(r02*r02)))+(((0.00287196062498456)*py*r01*r02*(sj0*sj0)))+(((1.13624)*py*sj0*(px*px)*(r02*r02)))+(((-2.27248)*cj0*pz*r00*r02*(py*py)))+(((-1.544)*cj0*px*py*pz*sj0*(r02*r02)))+(((2.27248)*cj0*px*(py*py)*(r01*r01)))+(((-0.386)*(pz*pz*pz)*(r01*r01)*(sj0*sj0)))+(((0.386)*cj0*r00*r02*sj0*(py*py*py)))+(((0.386)*pz*(py*py)*(r01*r01)*(sj0*sj0)))+(((1.13624)*py*sj0*(pz*pz)*(r02*r02)))+(((-0.772)*pz*(py*py)*(r01*r01)))+(((0.386)*r00*r02*(px*px*px)))+(((1.13624)*py*sj0*(pz*pz)*(r01*r01)))+(((-0.01161748588)*pz*r01*r02*sj0))+(((-0.386)*r00*r02*(cj0*cj0)*(px*px*px)))+(((-0.00112108738742)*cj0*r00*r01*sj0))+(((0.21929432)*cj0*py*pz*r00*r02*sj0))+(((1.13624)*sj0*(py*py*py)*(r01*r01)))+(((-0.01161748588)*cj0*pz*r00*r02))+(((0.386)*cj0*r01*r02*sj0*(px*px*px)))+(((-0.772)*px*r00*r02*(py*py)*(sj0*sj0)))+(((1.13624)*cj0*py*r00*r01*(pz*pz)))+(((-0.00056054369371)*(r01*r01)*(sj0*sj0)))+(((-1.13624)*cj0*r00*r01*(py*py*py)))+(((-0.772)*py*r01*r02*(cj0*cj0)*(px*px)))+(((0.21929432)*cj0*px*pz*r01*r02*sj0))+(((0.386)*py*r01*r02*(px*px)*(sj0*sj0)))+(((-0.772)*pz*(py*py)*(r02*r02)*(sj0*sj0)))+(((0.772)*px*py*pz*r00*r01*(sj0*sj0)))+(((-1.13624)*r00*r01*sj0*(px*px*px)))+(((0.10964716)*(py*py)*(r01*r01)*(sj0*sj0)))+(((-0.0014596053192864)*cj0*r00*r02))+(((-0.10964716)*(px*px)*(r01*r01)*(sj0*sj0)))+(((1.158)*px*r00*r02*(cj0*cj0)*(pz*pz)))+(((1.13624)*px*r00*r01*sj0*(pz*pz)))+(((0.2855113344)*cj0*px*pz*(r02*r02)))+(((-0.386)*(cj0*cj0)*(pz*pz*pz)*(r00*r00)))+(((0.00287196062498456)*px*r00*r02*(cj0*cj0)))+(((-1.13624)*cj0*px*(py*py)*(r00*r00)))+(((-1.544)*px*py*pz*r00*r01))+(((0.386)*px*r00*r02*(cj0*cj0)*(py*py)))+(((0.00056054369371)*(r02*r02)))+(((-0.772)*cj0*r00*r01*sj0*(pz*pz*pz)))+(((-0.00287196062498456)*pz*(cj0*cj0)*(r00*r00)))+(((0.00845398067495455)*py*sj0*(r02*r02)))+(((-0.10964716)*(pz*pz)*(r02*r02)))+(((3.40872)*px*r00*r01*sj0*(py*py)))+(((2.27248)*py*sj0*(px*px)*(r00*r00)))+(((1.158)*cj0*px*r01*r02*sj0*(pz*pz)))+(((-0.2855113344)*r01*r02*sj0*(px*px)))+(((-0.386)*pz*(px*px)*(r01*r01)*(sj0*sj0)))+(((0.386)*py*r01*r02*(px*px)))+(((-0.00316350520504545)*cj0*px*(r00*r00)))+(((0.772)*cj0*px*py*pz*sj0*(r00*r00)))+(((0.772)*px*py*pz*r00*r01*(cj0*cj0)))+(((0.10964716)*(px*px)*(r02*r02)))+(((0.21929432)*py*pz*r01*r02*(sj0*sj0)))+(((-0.10964716)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((-0.00316350520504545)*cj0*py*r00*r01))+(((1.13624)*cj0*px*(py*py)*(r02*r02)))+(((-0.2855113344)*cj0*r00*r02*(py*py)))+(((0.386)*r01*r02*(py*py*py)))+(((-0.772)*pz*(px*px)*(r00*r00)))+(((0.386)*px*r00*r02*(py*py)))+(((2.27248)*cj0*px*py*pz*r01*r02))+(((-0.21929432)*px*pz*r00*r02))+(((1.13624)*cj0*px*(pz*pz)*(r00*r00)))+(((-0.10964716)*(cj0*cj0)*(pz*pz)*(r00*r00)))+(((1.13624)*sj0*(py*py*py)*(r02*r02)))+(((0.2855113344)*cj0*px*pz*(r00*r00)))+(((-1.158)*py*r01*r02*(pz*pz)))+(((3.40872)*cj0*py*r00*r01*(px*px)))+(((0.21929432)*cj0*px*py*sj0*(r01*r01)))+(((0.00107469637501544)*pz*(r02*r02)))+(((-1.158)*cj0*py*r00*r02*sj0*(px*px)))+(((0.2855113344)*py*pz*sj0*(r01*r01)))+(((0.386)*pz*(px*px)*(r02*r02)))+(((0.2855113344)*px*pz*r00*r01*sj0))+(((0.2855113344)*px*py*r00*r02*sj0))+(((0.10964716)*(cj0*cj0)*(px*px)*(r00*r00)))+(((-0.21929432)*cj0*r00*r01*sj0*(pz*pz)))+(((0.00107469637501544)*px*r00*r02))+(((-0.00056054369371)*(cj0*cj0)*(r00*r00)))+(((1.13624)*cj0*px*(pz*pz)*(r02*r02)))+(((0.386)*pz*(cj0*cj0)*(px*px)*(r00*r00)))+(((1.158)*py*r01*r02*(pz*pz)*(sj0*sj0)))+(((0.10964716)*(py*py)*(r02*r02)))+(((0.21929432)*px*py*r00*r01*(cj0*cj0)))+(((-0.772)*pz*(cj0*cj0)*(px*px)*(r02*r02)))+(((0.2855113344)*cj0*px*py*r01*r02))+(((0.772)*cj0*px*py*pz*sj0*(r01*r01)))+(((-0.0014596053192864)*r01*r02*sj0))+(((-0.00574392124996912)*cj0*pz*r00*r01*sj0)));
op[2]=((((8.0)*cj0*py*r00*r02*sj0*(pz*pz*pz)))+(((-24.0)*cj0*py*pz*r00*r02*sj0*(px*px)))+(((-8.0)*px*r00*r02*(pz*pz*pz)))+(((8.0)*cj0*px*py*sj0*(pz*pz)*(r01*r01)))+(((-0.15389241719984)*(px*px)*(r02*r02)))+(((-24.0)*cj0*r00*r01*sj0*(px*px)*(py*py)))+(((8.0)*cj0*px*sj0*(py*py*py)*(r00*r00)))+(((8.0)*px*py*r00*r01*(pz*pz)*(sj0*sj0)))+(((-0.18873983440032)*cj0*py*pz*r00*r02*sj0))+(((0.18873983440032)*cj0*r00*r01*sj0*(pz*pz)))+(((-2.0)*(px*px*px*px)*(r02*r02)))+(((-2.0)*(pz*pz*pz*pz)*(r01*r01)*(sj0*sj0)))+(((-2.0)*(cj0*cj0)*(py*py*py*py)*(r00*r00)))+(((0.32894148)*cj0*py*pz*r00*r01))+(((-4.0)*(cj0*cj0)*(py*py)*(pz*pz)*(r00*r00)))+(((4.0)*(px*px)*(pz*pz)*(r02*r02)))+(((8.0)*px*r00*r02*(cj0*cj0)*(pz*pz*pz)))+(((-0.32894148)*cj0*r00*r02*(py*py)))+(((0.32894148)*cj0*px*pz*(r02*r02)))+(((-24.0)*cj0*px*pz*r01*r02*sj0*(py*py)))+(((0.27053583440032)*py*pz*r01*r02))+(((-8.0)*(px*px)*(pz*pz)*(r00*r00)))+(((0.00288820383843456)*cj0*r00*r01*sj0))+(((-4.0)*cj0*r00*r01*sj0*(pz*pz*pz*pz)))+(((-0.18873983440032)*py*pz*r01*r02*(sj0*sj0)))+(((8.0)*pz*r01*r02*(py*py*py)))+(((8.0)*cj0*pz*r00*r02*sj0*(py*py*py)))+(((-0.03724899999936)*px*py*r00*r01))+(((-8.0)*py*r01*r02*(pz*pz*pz)))+(((0.32894148)*px*py*r00*r02*sj0))+(((-2.0)*(pz*pz*pz*pz)*(r02*r02)))+(((-8.0)*pz*r00*r02*(cj0*cj0)*(px*px*px)))+(((8.0)*cj0*pz*r01*r02*sj0*(px*px*px)))+(((-2.0)*(px*px*px*px)*(r01*r01)*(sj0*sj0)))+(((-8.0)*cj0*px*sj0*(py*py*py)*(r01*r01)))+(((-2.0)*(cj0*cj0)*(px*px*px*px)*(r00*r00)))+(((-8.0)*(py*py)*(pz*pz)*(r02*r02)*(sj0*sj0)))+(((-0.01862449999968)*(px*px)*(r00*r00)))+(((-8.0)*(cj0*cj0)*(px*px)*(py*py)*(r01*r01)))+(((0.27437458440016)*(px*px)*(r01*r01)*(sj0*sj0)))+(((0.32894148)*cj0*px*pz*(r00*r00)))+(((-0.32894148)*r01*r02*sj0*(px*px)))+(((0.00144410191921728)*(r01*r01)*(sj0*sj0)))+(((-4.0)*(px*px)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((-0.54874916880032)*cj0*px*py*sj0*(r00*r00)))+(((-16.0)*cj0*px*py*sj0*(pz*pz)*(r02*r02)))+(((0.13526791720016)*(pz*pz)*(r02*r02)))+(((-2.0)*(py*py*py*py)*(r01*r01)*(sj0*sj0)))+(((-4.0)*(px*px)*(py*py)*(r02*r02)))+(((-0.27437458440016)*(py*py)*(r01*r01)*(sj0*sj0)))+(((8.0)*py*pz*r01*r02*(px*px)*(sj0*sj0)))+(((4.0)*(py*py)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((8.0)*px*py*r00*r01*(cj0*cj0)*(pz*pz)))+(((4.0)*(px*px)*(py*py)*(r01*r01)*(sj0*sj0)))+(((8.0)*py*r00*r01*(px*px*px)*(sj0*sj0)))+(((-0.01862449999968)*(py*py)*(r01*r01)))+(((0.32894148)*cj0*px*py*r01*r02))+(((-0.15389241719984)*(py*py)*(r02*r02)))+(((0.27437458440016)*(cj0*cj0)*(py*py)*(r00*r00)))+(((-8.0)*py*r00*r01*(cj0*cj0)*(px*px*px)))+(((-2.0)*(cj0*cj0)*(pz*pz*pz*pz)*(r00*r00)))+(((-0.27437458440016)*(cj0*cj0)*(px*px)*(r00*r00)))+(((0.27053583440032)*px*pz*r00*r02))+(((-8.0)*(cj0*cj0)*(px*px)*(pz*pz)*(r02*r02)))+(((0.32894148)*py*pz*sj0*(r01*r01)))+(((-0.54874916880032)*px*py*r00*r01*(sj0*sj0)))+(((-0.1800046672)*(cj0*cj0)*(px*px)*(r02*r02)))+(((-0.18873983440032)*cj0*px*pz*r01*r02*sj0))+(((8.0)*px*pz*r00*r02*(cj0*cj0)*(py*py)))+(((4.0)*cj0*r00*r01*sj0*(px*px*px*px)))+(((-0.00168163108113)*r01*r02*sj0))+(((-0.1800046672)*(py*py)*(r02*r02)*(sj0*sj0)))+(((-0.54874916880032)*cj0*px*py*sj0*(r01*r01)))+(((4.0)*(cj0*cj0)*(px*px)*(py*py)*(r00*r00)))+(((-16.0)*py*pz*r01*r02*(cj0*cj0)*(px*px)))+(((0.09436991720016)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((8.0)*px*r00*r01*(cj0*cj0)*(py*py*py)))+(((8.0)*py*pz*r01*r02*(px*px)))+(((-16.0)*px*py*r00*r01*(pz*pz)))+(((-2.0)*(py*py*py*py)*(r02*r02)))+(((4.0)*(cj0*cj0)*(px*px)*(pz*pz)*(r00*r00)))+(((4.0)*cj0*r00*r01*sj0*(py*py*py*py)))+(((8.0)*cj0*px*py*sj0*(pz*pz)*(r00*r00)))+(((-0.54874916880032)*px*py*r00*r01*(cj0*cj0)))+(((-16.0)*px*pz*r00*r02*(py*py)*(sj0*sj0)))+(((8.0)*py*r01*r02*(pz*pz*pz)*(sj0*sj0)))+(((8.0)*cj0*px*r01*r02*sj0*(pz*pz*pz)))+(((8.0)*cj0*py*sj0*(px*px*px)*(r01*r01)))+(((0.09436991720016)*(cj0*cj0)*(pz*pz)*(r00*r00)))+(((-0.000745306059712322)*(r02*r02)))+(((8.0)*pz*r00*r02*(px*px*px)))+(((-0.00168163108113)*cj0*r00*r02))+(((8.0)*px*pz*r00*r02*(py*py)))+(((-8.0)*pz*r01*r02*(py*py*py)*(sj0*sj0)))+(((-8.0)*(py*py)*(pz*pz)*(r01*r01)))+(((4.0)*(py*py)*(pz*pz)*(r02*r02)))+(((-8.0)*px*r00*r01*(py*py*py)*(sj0*sj0)))+(((-8.0)*cj0*py*sj0*(px*px*px)*(r00*r00)))+(((0.32894148)*py*pz*sj0*(r02*r02)))+(((-8.0)*(px*px)*(py*py)*(r00*r00)*(sj0*sj0)))+(((-0.18873983440032)*px*pz*r00*r02*(cj0*cj0)))+(((-0.3600093344)*cj0*px*py*sj0*(r02*r02)))+(((0.32894148)*px*pz*r00*r01*sj0))+(((0.00144410191921728)*(cj0*cj0)*(r00*r00))));
op[3]=((((-0.386)*r01*r02*(py*py*py)*(sj0*sj0)))+(((0.00287196062498456)*cj0*px*r01*r02*sj0))+(((2.27248)*px*py*pz*r00*r02*sj0))+(((-0.00316350520504545)*py*sj0*(r01*r01)))+(((0.10964716)*(pz*pz)*(r02*r02)))+(((-2.27248)*pz*r01*r02*sj0*(px*px)))+(((0.00287196062498456)*cj0*py*r00*r02*sj0))+(((0.00107469637501544)*py*r01*r02))+(((1.13624)*cj0*(px*px*px)*(r00*r00)))+(((0.386)*pz*(py*py)*(r02*r02)))+(((-0.00316350520504545)*px*r00*r01*sj0))+(((0.00845398067495455)*cj0*px*(r02*r02)))+(((-0.2855113344)*px*pz*r00*r01*sj0))+(((-1.13624)*py*sj0*(px*px)*(r01*r01)))+(((0.00056054369371)*(cj0*cj0)*(r00*r00)))+(((1.13624)*cj0*(px*px*px)*(r02*r02)))+(((-0.2855113344)*cj0*px*py*r01*r02))+(((0.0014596053192864)*r01*r02*sj0))+(((-1.158)*px*r00*r02*(pz*pz)))+(((1.158)*cj0*py*r00*r02*sj0*(pz*pz)))+(((-0.00287196062498456)*pz*(r01*r01)*(sj0*sj0)))+(((0.10964716)*(cj0*cj0)*(pz*pz)*(r00*r00)))+(((-1.158)*cj0*px*r01*r02*sj0*(py*py)))+(((-0.386)*pz*(cj0*cj0)*(py*py)*(r00*r00)))+(((-0.386)*(pz*pz*pz)*(r02*r02)))+(((0.00287196062498456)*py*r01*r02*(sj0*sj0)))+(((1.13624)*py*sj0*(px*px)*(r02*r02)))+(((-2.27248)*cj0*pz*r00*r02*(py*py)))+(((-1.544)*cj0*px*py*pz*sj0*(r02*r02)))+(((2.27248)*cj0*px*(py*py)*(r01*r01)))+(((-0.21929432)*px*py*r00*r01*(cj0*cj0)))+(((-0.386)*(pz*pz*pz)*(r01*r01)*(sj0*sj0)))+(((-0.2855113344)*px*py*r00*r02*sj0))+(((-0.10964716)*(py*py)*(r01*r01)*(sj0*sj0)))+(((0.386)*cj0*r00*r02*sj0*(py*py*py)))+(((0.386)*pz*(py*py)*(r01*r01)*(sj0*sj0)))+(((1.13624)*py*sj0*(pz*pz)*(r02*r02)))+(((-0.772)*pz*(py*py)*(r01*r01)))+(((0.386)*r00*r02*(px*px*px)))+(((1.13624)*py*sj0*(pz*pz)*(r01*r01)))+(((0.10964716)*(px*px)*(r01*r01)*(sj0*sj0)))+(((-0.01161748588)*pz*r01*r02*sj0))+(((-0.386)*r00*r02*(cj0*cj0)*(px*px*px)))+(((-0.2855113344)*cj0*px*pz*(r00*r00)))+(((1.13624)*sj0*(py*py*py)*(r01*r01)))+(((-0.01161748588)*cj0*pz*r00*r02))+(((0.386)*cj0*r01*r02*sj0*(px*px*px)))+(((-0.772)*px*r00*r02*(py*py)*(sj0*sj0)))+(((1.13624)*cj0*py*r00*r01*(pz*pz)))+(((-0.10964716)*(px*px)*(r02*r02)))+(((0.2855113344)*cj0*r00*r02*(py*py)))+(((-1.13624)*cj0*r00*r01*(py*py*py)))+(((-0.772)*py*r01*r02*(cj0*cj0)*(px*px)))+(((0.386)*py*r01*r02*(px*px)*(sj0*sj0)))+(((-0.772)*pz*(py*py)*(r02*r02)*(sj0*sj0)))+(((0.772)*px*py*pz*r00*r01*(sj0*sj0)))+(((-0.21929432)*py*pz*r01*r02*(sj0*sj0)))+(((-1.13624)*r00*r01*sj0*(px*px*px)))+(((0.2855113344)*r01*r02*sj0*(px*px)))+(((-0.21929432)*cj0*px*pz*r01*r02*sj0))+(((-0.21929432)*px*pz*r00*r02*(cj0*cj0)))+(((1.158)*px*r00*r02*(cj0*cj0)*(pz*pz)))+(((0.10964716)*(cj0*cj0)*(py*py)*(r00*r00)))+(((1.13624)*px*r00*r01*sj0*(pz*pz)))+(((-0.386)*(cj0*cj0)*(pz*pz*pz)*(r00*r00)))+(((0.00287196062498456)*px*r00*r02*(cj0*cj0)))+(((-1.13624)*cj0*px*(py*py)*(r00*r00)))+(((-1.544)*px*py*pz*r00*r01))+(((0.386)*px*r00*r02*(cj0*cj0)*(py*py)))+(((-0.2855113344)*cj0*py*pz*r00*r01))+(((-0.2855113344)*py*pz*sj0*(r01*r01)))+(((-0.772)*cj0*r00*r01*sj0*(pz*pz*pz)))+(((-0.00287196062498456)*pz*(cj0*cj0)*(r00*r00)))+(((0.00845398067495455)*py*sj0*(r02*r02)))+(((-0.10964716)*(py*py)*(r02*r02)))+(((0.0014596053192864)*cj0*r00*r02))+(((3.40872)*px*r00*r01*sj0*(py*py)))+(((2.27248)*py*sj0*(px*px)*(r00*r00)))+(((1.158)*cj0*px*r01*r02*sj0*(pz*pz)))+(((-0.386)*pz*(px*px)*(r01*r01)*(sj0*sj0)))+(((0.21929432)*py*pz*r01*r02))+(((0.386)*py*r01*r02*(px*px)))+(((-0.00316350520504545)*cj0*px*(r00*r00)))+(((0.772)*cj0*px*py*pz*sj0*(r00*r00)))+(((0.772)*px*py*pz*r00*r01*(cj0*cj0)))+(((-0.21929432)*cj0*px*py*sj0*(r01*r01)))+(((-0.00316350520504545)*cj0*py*r00*r01))+(((1.13624)*cj0*px*(py*py)*(r02*r02)))+(((-0.10964716)*(cj0*cj0)*(px*px)*(r00*r00)))+(((0.00112108738742)*cj0*r00*r01*sj0))+(((0.386)*r01*r02*(py*py*py)))+(((-0.772)*pz*(px*px)*(r00*r00)))+(((0.386)*px*r00*r02*(py*py)))+(((0.21929432)*cj0*r00*r01*sj0*(pz*pz)))+(((2.27248)*cj0*px*py*pz*r01*r02))+(((1.13624)*cj0*px*(pz*pz)*(r00*r00)))+(((1.13624)*sj0*(py*py*py)*(r02*r02)))+(((-1.158)*py*r01*r02*(pz*pz)))+(((3.40872)*cj0*py*r00*r01*(px*px)))+(((0.00107469637501544)*pz*(r02*r02)))+(((-0.21929432)*px*py*r00*r01*(sj0*sj0)))+(((-0.2855113344)*cj0*px*pz*(r02*r02)))+(((-1.158)*cj0*py*r00*r02*sj0*(px*px)))+(((0.386)*pz*(px*px)*(r02*r02)))+(((0.10964716)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((0.00107469637501544)*px*r00*r02))+(((1.13624)*cj0*px*(pz*pz)*(r02*r02)))+(((-0.21929432)*cj0*px*py*sj0*(r00*r00)))+(((0.21929432)*px*pz*r00*r02))+(((0.386)*pz*(cj0*cj0)*(px*px)*(r00*r00)))+(((-0.21929432)*cj0*py*pz*r00*r02*sj0))+(((1.158)*py*r01*r02*(pz*pz)*(sj0*sj0)))+(((0.00056054369371)*(r01*r01)*(sj0*sj0)))+(((-0.00056054369371)*(r02*r02)))+(((-0.772)*pz*(cj0*cj0)*(px*px)*(r02*r02)))+(((0.772)*cj0*px*py*pz*sj0*(r01*r01)))+(((-0.2855113344)*py*pz*sj0*(r02*r02)))+(((-0.00574392124996912)*cj0*pz*r00*r01*sj0)));
op[4]=((((-0.386)*pz*r01*r02*sj0*(px*px)))+(((-1.0)*(pz*pz*pz*pz)*(r01*r01)*(sj0*sj0)))+(((-4.0)*py*r00*r01*(cj0*cj0)*(px*px*px)))+(((0.193)*sj0*(py*py*py)*(r02*r02)))+(((0.19114141719984)*py*pz*r01*r02*(sj0*sj0)))+(((0.00143598031249228)*cj0*px*(r02*r02)))+(((-1.13624)*cj0*px*py*pz*sj0*(r00*r00)))+(((-12.0)*cj0*r00*r01*sj0*(px*px)*(py*py)))+(((1.13624)*cj0*r00*r01*sj0*(pz*pz*pz)))+(((-4.0)*(px*px)*(pz*pz)*(r00*r00)))+(((0.386)*cj0*px*py*pz*r01*r02))+(((0.193)*py*sj0*(px*px)*(r02*r02)))+(((-0.00422699033747728)*cj0*px*r01*r02*sj0))+(((0.00422699033747728)*pz*(cj0*cj0)*(r00*r00)))+(((1.13624)*py*r01*r02*(cj0*cj0)*(px*px)))+(((-0.05482358)*cj0*px*pz*(r00*r00)))+(((-0.56812)*cj0*r01*r02*sj0*(px*px*px)))+(((-0.15024341719984)*py*pz*r01*r02))+(((-0.05482358)*py*pz*sj0*(r02*r02)))+(((-12.0)*cj0*px*pz*r01*r02*sj0*(py*py)))+(((-0.0019733285)*pz*r01*r02*sj0))+(((-1.70436)*cj0*py*r00*r02*sj0*(pz*pz)))+(((0.01113674999984)*px*py*r00*r01*(sj0*sj0)))+(((-0.56812)*pz*(cj0*cj0)*(px*px)*(r00*r00)))+(((2.0)*(cj0*cj0)*(px*px)*(pz*pz)*(r00*r00)))+(((4.0)*py*r01*r02*(pz*pz*pz)*(sj0*sj0)))+(((-0.00556837499992)*(px*px)*(r01*r01)*(sj0*sj0)))+(((-0.05482358)*cj0*py*pz*r00*r01))+(((-0.05482358)*px*pz*r00*r01*sj0))+(((-0.0019733285)*cj0*pz*r00*r02))+(((-7.75170003456103e-6)*(cj0*cj0)*(r00*r00)))+(((4.0)*cj0*pz*r00*r02*sj0*(py*py*py)))+(((4.0)*px*py*r00*r01*(cj0*cj0)*(pz*pz)))+(((4.0)*cj0*px*py*sj0*(pz*pz)*(r00*r00)))+(((-0.00053734818750772)*px*r00*r01*sj0))+(((-0.00556837499992)*(cj0*cj0)*(py*py)*(r00*r00)))+(((-1.55034000691221e-5)*cj0*r00*r01*sj0))+(((-0.56812)*pz*(px*px)*(r02*r02)))+(((-8.0)*cj0*px*py*sj0*(pz*pz)*(r02*r02)))+(((4.0)*cj0*px*r01*r02*sj0*(pz*pz*pz)))+(((-1.13624)*px*py*pz*r00*r01*(sj0*sj0)))+(((0.193)*cj0*px*(py*py)*(r02*r02)))+(((-0.00053734818750772)*py*sj0*(r01*r01)))+(((0.00422699033747728)*pz*(r01*r01)*(sj0*sj0)))+(((-0.56812)*pz*(py*py)*(r01*r01)*(sj0*sj0)))+(((-2.0)*(px*px)*(py*py)*(r02*r02)))+(((-8.0)*px*py*r00*r01*(pz*pz)))+(((1.13624)*pz*(py*py)*(r01*r01)))+(((0.56812)*(cj0*cj0)*(pz*pz*pz)*(r00*r00)))+(((-0.09557070859992)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((-0.56812)*px*r00*r02*(cj0*cj0)*(py*py)))+(((0.193)*cj0*px*(pz*pz)*(r02*r02)))+(((4.0)*px*pz*r00*r02*(cj0*cj0)*(py*py)))+(((0.579)*px*r00*r01*sj0*(py*py)))+(((0.19114141719984)*cj0*py*pz*r00*r02*sj0))+(((0.193)*py*sj0*(pz*pz)*(r02*r02)))+(((4.0)*px*r00*r01*(cj0*cj0)*(py*py*py)))+(((4.0)*pz*r01*r02*(py*py*py)))+(((-0.00931224999984)*(py*py)*(r01*r01)))+(((-1.0)*(cj0*cj0)*(pz*pz*pz*pz)*(r00*r00)))+(((-0.09557070859992)*(cj0*cj0)*(pz*pz)*(r00*r00)))+(((0.193)*cj0*px*(pz*pz)*(r00*r00)))+(((-0.05482358)*cj0*px*pz*(r02*r02)))+(((-4.0)*(cj0*cj0)*(px*px)*(pz*pz)*(r02*r02)))+(((0.00143598031249228)*py*sj0*(r02*r02)))+(((-0.386)*cj0*pz*r00*r02*(py*py)))+(((0.00845398067495455)*cj0*pz*r00*r01*sj0))+(((0.386)*py*sj0*(px*px)*(r00*r00)))+(((-2.0)*(px*px)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((-0.56812)*r01*r02*(py*py*py)))+(((-4.0)*py*r01*r02*(pz*pz*pz)))+(((-0.00422699033747728)*px*r00*r02*(cj0*cj0)))+(((2.0)*cj0*r00*r01*sj0*(py*py*py*py)))+(((-1.0)*(cj0*cj0)*(px*px*px*px)*(r00*r00)))+(((-0.19114141719984)*cj0*r00*r01*sj0*(pz*pz)))+(((2.0)*(cj0*cj0)*(px*px)*(py*py)*(r00*r00)))+(((-1.0)*(py*py*py*py)*(r01*r01)*(sj0*sj0)))+(((-0.56812)*px*r00*r02*(py*py)))+(((4.0)*py*pz*r01*r02*(px*px)))+(((-0.1800046672)*cj0*px*py*sj0*(r02*r02)))+(((-0.193)*cj0*px*(py*py)*(r00*r00)))+(((0.01113674999984)*cj0*px*py*sj0*(r00*r00)))+(((0.56812)*r01*r02*(py*py*py)*(sj0*sj0)))+(((0.00556837499992)*(py*py)*(r01*r01)*(sj0*sj0)))+(((4.0)*cj0*px*sj0*(py*py*py)*(r00*r00)))+(((-0.05482358)*px*py*r00*r02*sj0))+(((-0.05482358)*py*pz*sj0*(r01*r01)))+(((4.0)*cj0*px*py*sj0*(pz*pz)*(r01*r01)))+(((0.193)*px*r00*r01*sj0*(pz*pz)))+(((-0.56812)*cj0*r00*r02*sj0*(py*py*py)))+(((4.0)*pz*r00*r02*(px*px*px)))+(((-8.0)*px*pz*r00*r02*(py*py)*(sj0*sj0)))+(((-2.0)*cj0*r00*r01*sj0*(pz*pz*pz*pz)))+(((0.386)*px*py*pz*r00*r02*sj0))+(((0.06580945860008)*(py*py)*(r02*r02)))+(((1.13624)*px*r00*r02*(py*py)*(sj0*sj0)))+(((-1.70436)*px*r00*r02*(cj0*cj0)*(pz*pz)))+(((-4.0)*(py*py)*(pz*pz)*(r02*r02)*(sj0*sj0)))+(((-4.0)*(cj0*cj0)*(px*px)*(py*py)*(r01*r01)))+(((-0.00053734818750772)*cj0*py*r00*r01))+(((-0.00931224999984)*(px*px)*(r00*r00)))+(((0.19114141719984)*cj0*px*pz*r01*r02*sj0))+(((-1.0)*(cj0*cj0)*(py*py*py*py)*(r00*r00)))+(((-8.0)*py*pz*r01*r02*(cj0*cj0)*(px*px)))+(((0.00556837499992)*(cj0*cj0)*(px*px)*(r00*r00)))+(((2.27248)*cj0*px*py*pz*sj0*(r02*r02)))+(((-0.00158175260252272)*pz*(r02*r02)))+(((2.0)*(px*px)*(pz*pz)*(r02*r02)))+(((-4.0)*cj0*px*sj0*(py*py*py)*(r01*r01)))+(((0.000280271846855)*r01*r02*sj0))+(((-1.70436)*cj0*px*r01*r02*sj0*(pz*pz)))+(((-1.0)*(py*py*py*py)*(r02*r02)))+(((-1.13624)*cj0*px*py*pz*sj0*(r01*r01)))+(((-0.56812)*r00*r02*(px*px*px)))+(((0.19114141719984)*px*pz*r00*r02*(cj0*cj0)))+(((-0.56812)*py*r01*r02*(px*px)))+(((1.70436)*px*r00*r02*(pz*pz)))+(((2.0)*cj0*r00*r01*sj0*(px*px*px*px)))+(((-0.56812)*py*r01*r02*(px*px)*(sj0*sj0)))+(((-2.0)*(cj0*cj0)*(py*py)*(pz*pz)*(r00*r00)))+(((-0.00422699033747728)*cj0*py*r00*r02*sj0))+(((0.386)*cj0*px*(py*py)*(r01*r01)))+(((0.56812)*pz*(cj0*cj0)*(py*py)*(r00*r00)))+(((1.13624)*pz*(cj0*cj0)*(px*px)*(r02*r02)))+(((-1.70436)*py*r01*r02*(pz*pz)*(sj0*sj0)))+(((-0.07512170859992)*(pz*pz)*(r02*r02)))+(((1.70436)*py*r01*r02*(pz*pz)))+(((0.56812)*r00*r02*(cj0*cj0)*(px*px*px)))+(((0.000357149629787039)*(r02*r02)))+(((0.56812)*(pz*pz*pz)*(r02*r02)))+(((1.13624)*pz*(py*py)*(r02*r02)*(sj0*sj0)))+(((0.193)*sj0*(py*py*py)*(r01*r01)))+(((-4.0)*pz*r01*r02*(py*py*py)*(sj0*sj0)))+(((-4.0)*(py*py)*(pz*pz)*(r01*r01)))+(((-1.0)*(pz*pz*pz*pz)*(r02*r02)))+(((0.01113674999984)*cj0*px*py*sj0*(r01*r01)))+(((4.0)*cj0*pz*r01*r02*sj0*(px*px*px)))+(((-0.193)*py*sj0*(px*px)*(r01*r01)))+(((-0.193)*cj0*r00*r01*(py*py*py)))+(((-4.0)*px*r00*r02*(pz*pz*pz)))+(((0.193)*cj0*(px*px*px)*(r02*r02)))+(((-0.56812)*pz*(py*py)*(r02*r02)))+(((0.56812)*(pz*pz*pz)*(r01*r01)*(sj0*sj0)))+(((-1.0)*(px*px*px*px)*(r01*r01)*(sj0*sj0)))+(((0.05482358)*cj0*r00*r02*(py*py)))+(((4.0)*px*r00*r02*(cj0*cj0)*(pz*pz*pz)))+(((4.0)*px*py*r00*r01*(pz*pz)*(sj0*sj0)))+(((0.01113674999984)*px*py*r00*r01*(cj0*cj0)))+(((4.0)*cj0*py*r00*r02*sj0*(pz*pz*pz)))+(((-0.00158175260252272)*py*r01*r02))+(((0.000280271846855)*cj0*r00*r02))+(((0.06580945860008)*(px*px)*(r02*r02)))+(((0.193)*cj0*(px*px*px)*(r00*r00)))+(((4.0)*py*r00*r01*(px*px*px)*(sj0*sj0)))+(((1.13624)*pz*(px*px)*(r00*r00)))+(((-0.0900023336)*(cj0*cj0)*(px*px)*(r02*r02)))+(((4.0)*px*pz*r00*r02*(py*py)))+(((2.0)*(py*py)*(pz*pz)*(r02*r02)))+(((0.193)*py*sj0*(pz*pz)*(r01*r01)))+(((-0.05482358)*cj0*px*py*r01*r02))+(((2.0)*(py*py)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((-4.0)*pz*r00*r02*(cj0*cj0)*(px*px*px)))+(((-4.0)*px*r00*r01*(py*py*py)*(sj0*sj0)))+(((-1.13624)*px*py*pz*r00*r01*(cj0*cj0)))+(((0.579)*cj0*py*r00*r01*(px*px)))+(((-4.0)*(px*px)*(py*py)*(r00*r00)*(sj0*sj0)))+(((0.56812)*pz*(px*px)*(r01*r01)*(sj0*sj0)))+(((-0.00053734818750772)*cj0*px*(r00*r00)))+(((-12.0)*cj0*py*pz*r00*r02*sj0*(px*px)))+(((-0.01862449999968)*px*py*r00*r01))+(((1.70436)*cj0*py*r00*r02*sj0*(px*px)))+(((2.0)*(px*px)*(py*py)*(r01*r01)*(sj0*sj0)))+(((-4.0)*cj0*py*sj0*(px*px*px)*(r00*r00)))+(((0.193)*cj0*py*r00*r01*(pz*pz)))+(((4.0)*py*pz*r01*r02*(px*px)*(sj0*sj0)))+(((0.05482358)*r01*r02*sj0*(px*px)))+(((2.27248)*px*py*pz*r00*r01))+(((-0.00422699033747728)*py*r01*r02*(sj0*sj0)))+(((-0.15024341719984)*px*pz*r00*r02))+(((-0.193)*r00*r01*sj0*(px*px*px)))+(((1.70436)*cj0*px*r01*r02*sj0*(py*py)))+(((-1.0)*(px*px*px*px)*(r02*r02)))+(((-0.00158175260252272)*px*r00*r02))+(((-0.0900023336)*(py*py)*(r02*r02)*(sj0*sj0)))+(((-7.75170003456103e-6)*(r01*r01)*(sj0*sj0)))+(((4.0)*cj0*py*sj0*(px*px*px)*(r01*r01))));
polyroots4(op,zeror,numroots);
IkReal j1array[4], cj1array[4], sj1array[4], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[4]={true,true,true,true};
_nj1 = 4;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
sj4array[0]=(((r00*sj0))+(((-1.0)*cj0*r01)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IkReal j3eval[2];
j3eval[0]=cj4;
j3eval[1]=IKsign(cj4);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
IkReal x35=(cj0*px);
IkReal x36=((4.75128617069989)*cj1);
IkReal x37=((13.9860139860001)*sj1);
IkReal x38=(py*sj0);
if( (((0.137082606897156)+((x35*x37))+((x35*x36))+((x37*x38))+((x36*x38))+(((-49.2361261212424)*(py*py)))+(((-49.2361261212424)*(px*px)))+(((13.9860139860001)*cj1*pz))+(((-49.2361261212424)*(pz*pz)))+(((-4.75128617069989)*pz*sj1)))) < -1-IKFAST_SINCOS_THRESH || (((0.137082606897156)+((x35*x37))+((x35*x36))+((x37*x38))+((x36*x38))+(((-49.2361261212424)*(py*py)))+(((-49.2361261212424)*(px*px)))+(((13.9860139860001)*cj1*pz))+(((-49.2361261212424)*(pz*pz)))+(((-4.75128617069989)*pz*sj1)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x39=IKasin(((0.137082606897156)+((x35*x37))+((x35*x36))+((x37*x38))+((x36*x38))+(((-49.2361261212424)*(py*py)))+(((-49.2361261212424)*(px*px)))+(((13.9860139860001)*cj1*pz))+(((-49.2361261212424)*(pz*pz)))+(((-4.75128617069989)*pz*sj1))));
j3array[0]=((-1.5707977349481)+(((-1.0)*x39)));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((1.57079491864169)+x39);
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
IkReal x40=py*py;
IkReal x41=pz*pz;
IkReal x42=px*px;
IkReal x43=(px*sj0);
IkReal x44=((2.0)*py);
IkReal x45=(cj0*py);
IkReal x46=((0.0965)*r01);
IkReal x47=(cj0*pz);
IkReal x48=((0.28406)*cj1);
IkReal x49=(py*r00);
IkReal x50=((0.28406)*sj1);
IkReal x51=(r00*sj0);
IkReal x52=(cj0*r01);
IkReal x53=((0.0965)*r02*sj1);
IkReal x54=((1.0)*x52);
evalcond[0]=((-0.02528477090004)+(((0.0965)*pz*sj1*x51))+(((2.86e-8)*(IKsin(j3))))+(((-1.0)*x41*x54))+(((-2.0)*pz*r02*x43))+(((-1.0)*x42*x54))+(((-0.02031029)*(IKcos(j3))))+((cj0*px*r00*x44))+(((-1.0)*x49*x50))+(((-1.0)*x42*x51))+((x45*x53))+((r02*x44*x47))+(((-1.0)*pz*x48*x51))+(((-0.0225005834)*x52))+(((-1.0)*sj1*x46*x47))+(((-1.0)*r02*x45*x48))+((cj1*px*x46))+(((0.0225005834)*x51))+((x40*x52))+((x40*x51))+((px*r01*x50))+((x41*x51))+((r01*x47*x48))+(((-1.0)*r01*x43*x44))+(((-0.0965)*cj1*x49))+(((-1.0)*x43*x53))+((r02*x43*x48)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2eval[0]=((-884082.898602797)+sj3+(((-710150.0)*cj3)));
j2eval[1]=IKsign(((-0.02528477090004)+(((-0.02031029)*cj3))+(((2.86e-8)*sj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x55=((2.0e-7)*pz);
IkReal x56=((0.14203)*sj1);
IkReal x57=(py*sj0);
IkReal x58=(cj1*pz);
IkReal x59=((0.0715)*sj3);
IkReal x60=(cj0*px);
IkReal x61=((2.0e-7)*sj1);
IkReal x62=((0.14203)*cj1);
IkReal x63=((0.0715)*cj3);
IkReal x64=(pz*sj1);
IkReal x65=((2.0e-7)*cj1);
IkReal x66=((0.0715)*sj1*x60);
CheckValue<IkReal> x67=IKPowWithIntegerCheck(IKsign(((-0.02528477090004)+(((-0.02031029)*cj3))+(((2.86e-8)*sj3)))),-1);
if(!x67.valid){
continue;
}
CheckValue<IkReal> x68 = IKatan2WithCheck(IkReal(((-0.02017251125)+((sj1*x55))+(((-0.003449875)*sj3))+(((-0.010155145)*cj3))+((x58*x63))+((sj1*x60*x63))+(((-1.0)*x59*x64))+((cj1*x59*x60))+((x56*x60))+((cj1*x57*x59))+(((0.14203)*x58))+((x56*x57))+(((-1.0)*x57*x65))+((sj1*x57*x63))+(((-1.0)*x60*x65)))),IkReal(((0.006852975906)+(((0.003449875)*cj3))+((sj1*x59*x60))+((x58*x59))+(((-1.0)*cj1*x57*x63))+((x63*x64))+((sj1*x57*x59))+((pz*x56))+(((-0.010155145)*sj3))+(((-1.0)*cj1*x60*x63))+(((-1.0)*x57*x62))+(((-1.0)*x57*x61))+(((-1.0)*x60*x61))+(((-1.0)*x60*x62))+(((-1.0)*cj1*x55)))),IKFAST_ATAN2_MAGTHRESH);
if(!x68.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x67.value)))+(x68.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x69=IKsin(j2);
IkReal x70=IKcos(j2);
IkReal x71=(px*sj1);
IkReal x72=(py*sj1);
IkReal x73=(cj1*sj0);
IkReal x74=((1.0)*px);
IkReal x75=(pz*r00);
IkReal x76=((1.0)*r01);
IkReal x77=(cj0*r01);
IkReal x78=(pz*sj1);
IkReal x79=(r00*sj0);
IkReal x80=(cj0*cj1);
IkReal x81=((0.14203)*x69);
IkReal x82=((2.0e-7)*x70);
IkReal x83=((2.0e-7)*x69);
IkReal x84=((0.14203)*x70);
IkReal x85=((0.0715)*x69);
IkReal x86=((0.0715)*x70);
IkReal x87=(sj3*x86);
IkReal x88=(cj3*x85);
IkReal x89=(sj3*x85);
IkReal x90=(cj3*x86);
IkReal x91=(x83+x84+x90);
IkReal x92=(x88+x81+x87);
evalcond[0]=((-0.14203)+((cj0*x71))+((cj1*pz))+x92+((sj0*x72))+(((-1.0)*x82)));
evalcond[1]=((0.04825)+x78+x91+(((-1.0)*x74*x80))+(((-1.0)*x89))+(((-1.0)*py*x73)));
evalcond[2]=((((-1.0)*r02*x73*x74))+(((-1.0)*pz*x76*x80))+x92+(((-1.0)*x71*x76))+(((-0.14203)*x79))+((x73*x75))+((py*r02*x80))+(((-1.0)*x82))+(((0.14203)*x77))+((r00*x72)));
evalcond[3]=((((-1.0)*cj1*r01*x74))+(((-0.04825)*x79))+((cj1*py*r00))+x89+(((-1.0)*sj0*sj1*x75))+((r02*sj0*x71))+(((-1.0)*x91))+(((-1.0)*cj0*r02*x72))+((x77*x78))+(((0.04825)*x77)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
IkReal x93=(cj0*px);
IkReal x94=((4.75128617069989)*cj1);
IkReal x95=((13.9860139860001)*sj1);
IkReal x96=(py*sj0);
if( (((0.137082606897156)+(((-49.2361261212424)*(py*py)))+(((-49.2361261212424)*(px*px)))+((x93*x94))+((x93*x95))+(((13.9860139860001)*cj1*pz))+((x95*x96))+(((-49.2361261212424)*(pz*pz)))+(((-4.75128617069989)*pz*sj1))+((x94*x96)))) < -1-IKFAST_SINCOS_THRESH || (((0.137082606897156)+(((-49.2361261212424)*(py*py)))+(((-49.2361261212424)*(px*px)))+((x93*x94))+((x93*x95))+(((13.9860139860001)*cj1*pz))+((x95*x96))+(((-49.2361261212424)*(pz*pz)))+(((-4.75128617069989)*pz*sj1))+((x94*x96)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x97=IKasin(((0.137082606897156)+(((-49.2361261212424)*(py*py)))+(((-49.2361261212424)*(px*px)))+((x93*x94))+((x93*x95))+(((13.9860139860001)*cj1*pz))+((x95*x96))+(((-49.2361261212424)*(pz*pz)))+(((-4.75128617069989)*pz*sj1))+((x94*x96))));
j3array[0]=((-1.5707977349481)+(((-1.0)*x97)));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((1.57079491864169)+x97);
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
IkReal x98=py*py;
IkReal x99=pz*pz;
IkReal x100=px*px;
IkReal x101=(px*sj0);
IkReal x102=((2.0)*py);
IkReal x103=(cj0*py);
IkReal x104=((0.0965)*r01);
IkReal x105=(cj0*pz);
IkReal x106=((0.28406)*cj1);
IkReal x107=(py*r00);
IkReal x108=((0.28406)*sj1);
IkReal x109=(r00*sj0);
IkReal x110=(cj0*r01);
IkReal x111=((0.0965)*r02*sj1);
IkReal x112=((1.0)*x110);
evalcond[0]=((0.02528477090004)+(((-1.0)*pz*x106*x109))+(((-0.0965)*cj1*x107))+(((-0.0225005834)*x110))+(((0.0965)*pz*sj1*x109))+(((-1.0)*x100*x112))+(((-2.86e-8)*(IKsin(j3))))+(((-1.0)*x101*x111))+(((-1.0)*x107*x108))+((px*r01*x108))+((x103*x111))+(((-1.0)*x112*x99))+(((-1.0)*r01*x101*x102))+((cj1*px*x104))+(((-1.0)*sj1*x104*x105))+((r01*x105*x106))+(((-1.0)*r02*x103*x106))+(((-2.0)*pz*r02*x101))+((cj0*px*r00*x102))+((r02*x101*x106))+((x109*x99))+((x109*x98))+(((-1.0)*x100*x109))+(((0.02031029)*(IKcos(j3))))+((r02*x102*x105))+(((0.0225005834)*x109))+((x110*x98)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2eval[0]=((-884082.898602797)+sj3+(((-710150.0)*cj3)));
j2eval[1]=IKsign(((-0.02528477090004)+(((-0.02031029)*cj3))+(((2.86e-8)*sj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x113=((2.0e-7)*pz);
IkReal x114=((0.14203)*sj1);
IkReal x115=(py*sj0);
IkReal x116=(cj1*pz);
IkReal x117=((0.0715)*sj3);
IkReal x118=(cj0*px);
IkReal x119=((2.0e-7)*sj1);
IkReal x120=((0.14203)*cj1);
IkReal x121=((0.0715)*cj3);
IkReal x122=(pz*sj1);
IkReal x123=((2.0e-7)*cj1);
IkReal x124=((0.0715)*sj1*x118);
CheckValue<IkReal> x125=IKPowWithIntegerCheck(IKsign(((-0.02528477090004)+(((-0.02031029)*cj3))+(((2.86e-8)*sj3)))),-1);
if(!x125.valid){
continue;
}
CheckValue<IkReal> x126 = IKatan2WithCheck(IkReal(((-0.02017251125)+((sj1*x113))+(((-1.0)*x118*x123))+(((-0.003449875)*sj3))+((x114*x115))+((x114*x118))+(((-0.010155145)*cj3))+(((-1.0)*x115*x123))+((sj1*x118*x121))+(((0.14203)*x116))+(((-1.0)*x117*x122))+((sj1*x115*x121))+((x116*x121))+((cj1*x117*x118))+((cj1*x115*x117)))),IkReal(((0.006852975906)+(((-1.0)*x118*x120))+(((-1.0)*cj1*x113))+((x121*x122))+(((0.003449875)*cj3))+(((-1.0)*x118*x119))+((pz*x114))+(((-1.0)*x115*x120))+(((-1.0)*x115*x119))+(((-1.0)*cj1*x118*x121))+((sj1*x117*x118))+(((-1.0)*cj1*x115*x121))+((sj1*x115*x117))+((x116*x117))+(((-0.010155145)*sj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x126.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x125.value)))+(x126.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x127=IKsin(j2);
IkReal x128=IKcos(j2);
IkReal x129=(px*sj1);
IkReal x130=(py*sj1);
IkReal x131=(cj1*sj0);
IkReal x132=((1.0)*px);
IkReal x133=(pz*r00);
IkReal x134=((1.0)*r01);
IkReal x135=(cj0*r01);
IkReal x136=(pz*sj1);
IkReal x137=(r00*sj0);
IkReal x138=(cj0*cj1);
IkReal x139=((2.0e-7)*x128);
IkReal x140=((0.14203)*x127);
IkReal x141=((2.0e-7)*x127);
IkReal x142=((0.14203)*x128);
IkReal x143=((0.0715)*x127);
IkReal x144=((0.0715)*x128);
IkReal x145=(sj3*x144);
IkReal x146=(cj3*x143);
IkReal x147=(cj3*x144);
IkReal x148=(sj3*x143);
IkReal x149=(x141+x142+x147);
IkReal x150=(x140+x145+x146);
evalcond[0]=((-0.14203)+((cj0*x129))+x150+((cj1*pz))+(((-1.0)*x139))+((sj0*x130)));
evalcond[1]=((0.04825)+(((-1.0)*x148))+x149+x136+(((-1.0)*x132*x138))+(((-1.0)*py*x131)));
evalcond[2]=((((-1.0)*x150))+(((-1.0)*r02*x131*x132))+((py*r02*x138))+(((0.14203)*x135))+((r00*x130))+x139+((x131*x133))+(((-1.0)*pz*x134*x138))+(((-1.0)*x129*x134))+(((-0.14203)*x137)));
evalcond[3]=((((-1.0)*x148))+((x135*x136))+(((-0.04825)*x137))+((cj1*py*r00))+x149+((r02*sj0*x129))+(((-1.0)*cj1*r01*x132))+(((-1.0)*cj0*r02*x130))+(((0.04825)*x135))+(((-1.0)*sj0*sj1*x133)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2, j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x151=(r01*sj0);
IkReal x152=((171324397650.0)*sj1);
IkReal x153=((504312781250.0)*cj1);
IkReal x154=((171324397650.0)*cj1);
IkReal x155=(cj0*r00);
IkReal x156=((3550750000000.0)*r02);
IkReal x157=(py*sj0);
IkReal x158=(py*r01);
IkReal x159=((504312781250.0)*sj1);
IkReal x160=(px*r00);
IkReal x161=((5000000.0)*pz);
IkReal x162=(cj0*px);
IkReal x163=((3550750000000.0)*pz);
IkReal x164=((5000000.0)*r02);
CheckValue<IkReal> x165=IKPowWithIntegerCheck(IKsign(cj4),-1);
if(!x165.valid){
continue;
}
CheckValue<IkReal> x166 = IKatan2WithCheck(IkReal(((((-1.0)*x153*x155))+(((-1.0)*r02*x161))+((x151*x163))+(((-1.0)*x151*x153))+((x152*x155))+(((357500.0)*cj4))+(((-5000000.0)*x160))+((x151*x152))+(((-5000000.0)*x158))+((x155*x163))+(((-1.0)*x156*x157))+((r02*x154))+((r02*x159))+(((-1.0)*x156*x162)))),IkReal(((((-1.0)*x157*x164))+(((-1.0)*x154*x155))+(((3550750000000.0)*x160))+((x151*x161))+(((-1.0)*x151*x159))+(((-1.0)*x151*x154))+(((-253878625000.0)*cj4))+(((3550750000000.0)*x158))+(((-1.0)*r02*x153))+(((-1.0)*x162*x164))+((x155*x161))+(((-1.0)*x155*x159))+((r02*x152))+((pz*x156)))),IKFAST_ATAN2_MAGTHRESH);
if(!x166.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x165.value)))+(x166.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x167=IKcos(j3);
IkReal x168=IKsin(j3);
IkReal x169=pz*pz;
IkReal x170=py*py;
IkReal x171=px*px;
IkReal x172=(r01*sj0);
IkReal x173=(cj0*px);
IkReal x174=((0.28406)*sj1);
IkReal x175=((0.14203)*sj1);
IkReal x176=((1.0)*r02);
IkReal x177=((0.0965)*sj1);
IkReal x178=(py*sj0);
IkReal x179=((0.0965)*cj1);
IkReal x180=(cj0*r00);
IkReal x181=(cj1*r02);
IkReal x182=(cj0*py);
IkReal x183=((0.28406)*cj1);
IkReal x184=(py*r00);
IkReal x185=(r00*sj0);
IkReal x186=((0.04825)*sj1);
IkReal x187=((0.04825)*cj1);
IkReal x188=(px*sj0);
IkReal x189=(cj0*r01);
IkReal x190=(px*r01);
IkReal x191=((0.14203)*cj1);
IkReal x192=((2.0)*px*py);
IkReal x193=((2.86e-8)*x168);
IkReal x194=(pz*x189);
IkReal x195=((0.02031029)*x167);
IkReal x196=(cj4*x168);
IkReal x197=((2.0)*pz*r02);
IkReal x198=((1.0)*x171);
IkReal x199=(cj4*x167);
IkReal x200=((1.0)*x169);
evalcond[0]=((0.00278418750004)+((pz*x183))+((x178*x179))+(((-1.0)*x193))+(((-1.0)*x198))+(((-1.0)*pz*x177))+((x173*x174))+((x173*x179))+(((-1.0)*x170))+x195+(((-1.0)*x200))+((x174*x178)));
evalcond[1]=(((x180*x187))+((x172*x187))+(((-1.0)*px*r00))+(((0.14203)*x181))+(((-1.0)*pz*x176))+((x172*x175))+(((-1.0)*r02*x186))+(((0.14203)*x199))+((x175*x180))+(((-2.0e-7)*x196))+(((0.0715)*cj4))+(((-1.0)*py*r01)));
evalcond[2]=(((pz*x172))+((pz*x180))+((x180*x186))+((x172*x186))+(((-1.0)*x180*x191))+(((-0.14203)*x196))+(((-2.0e-7)*x199))+(((0.04825)*x181))+(((-1.0)*x176*x178))+(((-1.0)*x172*x191))+(((-1.0)*x173*x176))+((r02*x175)));
evalcond[3]=((((-1.0)*pz*x183*x185))+(((0.28406)*x181*x188))+((x169*x185))+(((-1.0)*x188*x197))+(((-1.0)*x189*x200))+((r02*x177*x182))+((x179*x190))+(((-1.0)*x189*x198))+(((2.0)*x173*x184))+(((-0.28406)*x181*x182))+((x174*x190))+(((-1.0)*r02*x177*x188))+((sj4*x193))+(((-1.0)*x177*x194))+(((0.0225005834)*x185))+(((-1.0)*x185*x198))+(((-0.0225005834)*x189))+(((-1.0)*x172*x192))+((x170*x189))+((x170*x185))+(((-1.0)*x179*x184))+((x182*x197))+((pz*x177*x185))+(((-1.0)*sj4*x195))+(((-1.0)*x174*x184))+((x183*x194))+(((-0.02528477090004)*sj4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=cj4;
j2eval[1]=IKsign(cj4);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x201=(cj4*sj3);
IkReal x202=(cj3*cj4);
j2eval[0]=((((-1.0)*x202))+(((-710150.0)*x201)));
j2eval[1]=IKsign(((((-0.14203)*x201))+(((-2.0e-7)*x202))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x203=(cj3*cj4);
IkReal x204=(cj4*sj3);
j2eval[0]=((((357500.0)*cj4))+(((710150.0)*x203))+(((-1.0)*x204)));
j2eval[1]=IKsign(((((0.0715)*cj4))+(((-2.0e-7)*x204))+(((0.14203)*x203))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[2];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2eval[0]=((-884082.898602797)+sj3+(((-710150.0)*cj3)));
j2eval[1]=IKsign(((-0.02528477090004)+(((-0.02031029)*cj3))+(((2.86e-8)*sj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x205=((2.0e-7)*pz);
IkReal x206=((0.14203)*sj1);
IkReal x207=(py*sj0);
IkReal x208=(cj1*pz);
IkReal x209=((0.0715)*sj3);
IkReal x210=(cj0*px);
IkReal x211=((2.0e-7)*sj1);
IkReal x212=((0.14203)*cj1);
IkReal x213=((0.0715)*cj3);
IkReal x214=(pz*sj1);
IkReal x215=((2.0e-7)*cj1);
IkReal x216=((0.0715)*sj1*x210);
CheckValue<IkReal> x217=IKPowWithIntegerCheck(IKsign(((-0.02528477090004)+(((-0.02031029)*cj3))+(((2.86e-8)*sj3)))),-1);
if(!x217.valid){
continue;
}
CheckValue<IkReal> x218 = IKatan2WithCheck(IkReal(((-0.02017251125)+((sj1*x205))+((x206*x210))+(((-0.003449875)*sj3))+(((-0.010155145)*cj3))+((sj1*x207*x213))+((x208*x213))+(((-1.0)*x207*x215))+(((-1.0)*x210*x215))+((cj1*x209*x210))+((sj1*x210*x213))+((cj1*x207*x209))+(((-1.0)*x209*x214))+((x206*x207))+(((0.14203)*x208)))),IkReal(((0.006852975906)+(((-1.0)*cj1*x205))+(((-1.0)*cj1*x207*x213))+(((0.003449875)*cj3))+((x213*x214))+(((-1.0)*x207*x211))+(((-1.0)*x207*x212))+(((-1.0)*cj1*x210*x213))+((pz*x206))+(((-1.0)*x210*x211))+(((-1.0)*x210*x212))+((sj1*x209*x210))+(((-0.010155145)*sj3))+((x208*x209))+((sj1*x207*x209)))),IKFAST_ATAN2_MAGTHRESH);
if(!x218.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x217.value)))+(x218.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x219=IKsin(j2);
IkReal x220=IKcos(j2);
IkReal x221=(px*sj1);
IkReal x222=(py*sj1);
IkReal x223=(cj1*sj0);
IkReal x224=((1.0)*px);
IkReal x225=(pz*r00);
IkReal x226=((1.0)*r01);
IkReal x227=(cj0*r01);
IkReal x228=(pz*sj1);
IkReal x229=(r00*sj0);
IkReal x230=(cj0*cj1);
IkReal x231=((0.14203)*x219);
IkReal x232=((2.0e-7)*x220);
IkReal x233=((2.0e-7)*x219);
IkReal x234=((0.14203)*x220);
IkReal x235=((0.0715)*x219);
IkReal x236=((0.0715)*x220);
IkReal x237=(sj3*x236);
IkReal x238=(cj3*x235);
IkReal x239=(sj3*x235);
IkReal x240=(cj3*x236);
IkReal x241=(x233+x234+x240);
IkReal x242=(x238+x231+x237);
evalcond[0]=((-0.14203)+((sj0*x222))+((cj1*pz))+(((-1.0)*x232))+((cj0*x221))+x242);
evalcond[1]=((0.04825)+(((-1.0)*x224*x230))+(((-1.0)*x239))+x228+x241+(((-1.0)*py*x223)));
evalcond[2]=((((-0.14203)*x229))+((r00*x222))+((x223*x225))+(((-1.0)*x232))+x242+(((0.14203)*x227))+(((-1.0)*r02*x223*x224))+(((-1.0)*x221*x226))+(((-1.0)*pz*x226*x230))+((py*r02*x230)));
evalcond[3]=((((0.04825)*x227))+((x227*x228))+(((-1.0)*cj1*r01*x224))+((cj1*py*r00))+x239+((r02*sj0*x221))+(((-1.0)*sj0*sj1*x225))+(((-1.0)*x241))+(((-1.0)*cj0*r02*x222))+(((-0.04825)*x229)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[2];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2eval[0]=((-884082.898602797)+sj3+(((-710150.0)*cj3)));
j2eval[1]=IKsign(((-0.02528477090004)+(((-0.02031029)*cj3))+(((2.86e-8)*sj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x243=((2.0e-7)*pz);
IkReal x244=((0.14203)*sj1);
IkReal x245=(py*sj0);
IkReal x246=(cj1*pz);
IkReal x247=((0.0715)*sj3);
IkReal x248=(cj0*px);
IkReal x249=((2.0e-7)*sj1);
IkReal x250=((0.14203)*cj1);
IkReal x251=((0.0715)*cj3);
IkReal x252=(pz*sj1);
IkReal x253=((2.0e-7)*cj1);
IkReal x254=((0.0715)*sj1*x248);
CheckValue<IkReal> x255=IKPowWithIntegerCheck(IKsign(((-0.02528477090004)+(((-0.02031029)*cj3))+(((2.86e-8)*sj3)))),-1);
if(!x255.valid){
continue;
}
CheckValue<IkReal> x256 = IKatan2WithCheck(IkReal(((-0.02017251125)+((x246*x251))+((cj1*x245*x247))+((cj1*x247*x248))+(((-0.003449875)*sj3))+(((-0.010155145)*cj3))+((x244*x245))+((x244*x248))+(((-1.0)*x247*x252))+(((-1.0)*x248*x253))+(((-1.0)*x245*x253))+((sj1*x248*x251))+((sj1*x245*x251))+(((0.14203)*x246))+((sj1*x243)))),IkReal(((0.006852975906)+(((-1.0)*x248*x249))+(((0.003449875)*cj3))+(((-1.0)*cj1*x245*x251))+(((-1.0)*cj1*x243))+((x251*x252))+((sj1*x247*x248))+(((-1.0)*x248*x250))+(((-1.0)*x245*x250))+((sj1*x245*x247))+(((-1.0)*x245*x249))+(((-1.0)*cj1*x248*x251))+(((-0.010155145)*sj3))+((pz*x244))+((x246*x247)))),IKFAST_ATAN2_MAGTHRESH);
if(!x256.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x255.value)))+(x256.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x257=IKsin(j2);
IkReal x258=IKcos(j2);
IkReal x259=(px*sj1);
IkReal x260=(py*sj1);
IkReal x261=(cj1*sj0);
IkReal x262=((1.0)*px);
IkReal x263=(pz*r00);
IkReal x264=((1.0)*r01);
IkReal x265=(cj0*r01);
IkReal x266=(pz*sj1);
IkReal x267=(r00*sj0);
IkReal x268=(cj0*cj1);
IkReal x269=((2.0e-7)*x258);
IkReal x270=((0.14203)*x257);
IkReal x271=((2.0e-7)*x257);
IkReal x272=((0.14203)*x258);
IkReal x273=((0.0715)*x257);
IkReal x274=((0.0715)*x258);
IkReal x275=(sj3*x274);
IkReal x276=(cj3*x273);
IkReal x277=(cj3*x274);
IkReal x278=(sj3*x273);
IkReal x279=(x277+x272+x271);
IkReal x280=(x276+x275+x270);
evalcond[0]=((-0.14203)+((cj1*pz))+x280+((cj0*x259))+(((-1.0)*x269))+((sj0*x260)));
evalcond[1]=((0.04825)+(((-1.0)*x262*x268))+(((-1.0)*py*x261))+x266+x279+(((-1.0)*x278)));
evalcond[2]=((((-1.0)*r02*x261*x262))+(((-1.0)*x259*x264))+(((-1.0)*pz*x264*x268))+x269+((py*r02*x268))+(((-0.14203)*x267))+((r00*x260))+(((-1.0)*x280))+((x261*x263))+(((0.14203)*x265)));
evalcond[3]=((((-1.0)*sj0*sj1*x263))+(((-0.04825)*x267))+((cj1*py*r00))+x279+(((-1.0)*cj1*r01*x262))+(((0.04825)*x265))+(((-1.0)*cj0*r02*x260))+((r02*sj0*x259))+(((-1.0)*x278))+((x265*x266)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x281=((0.04825)*cj4);
IkReal x282=((0.0715)*cj3);
IkReal x283=((0.0715)*sj3);
IkReal x284=(cj1*r02);
IkReal x285=(cj4*sj3);
IkReal x286=(cj3*cj4);
IkReal x287=(pz*sj1);
IkReal x288=(r01*sj0*sj1);
IkReal x289=(cj0*r00*sj1);
IkReal x290=(cj0*cj1*px);
IkReal x291=(cj1*py*sj0);
CheckValue<IkReal> x292 = IKatan2WithCheck(IkReal((((x285*x287))+((sj3*x281))+(((-1.0)*x282*x284))+(((-1.0)*x282*x288))+(((-1.0)*x282*x289))+(((-0.14203)*x289))+(((-0.14203)*x288))+(((-0.14203)*x284))+(((-1.0)*x285*x290))+(((-1.0)*x285*x291)))),IkReal(((((-1.0)*cj3*x281))+((x286*x290))+((x286*x291))+(((2.0e-7)*x288))+(((2.0e-7)*x289))+(((2.0e-7)*x284))+(((-1.0)*x286*x287))+(((-1.0)*x283*x284))+(((-1.0)*x283*x288))+(((-1.0)*x283*x289)))),IKFAST_ATAN2_MAGTHRESH);
if(!x292.valid){
continue;
}
CheckValue<IkReal> x293=IKPowWithIntegerCheck(IKsign(((((-2.0e-7)*x285))+(((0.0715)*cj4))+(((0.14203)*x286)))),-1);
if(!x293.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x292.value)+(((1.5707963267949)*(x293.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x294=IKcos(j2);
IkReal x295=IKsin(j2);
IkReal x296=py*py;
IkReal x297=px*px;
IkReal x298=pz*pz;
IkReal x299=(r01*sj0);
IkReal x300=(py*sj1);
IkReal x301=((1.0)*cj1);
IkReal x302=((0.0715)*sj4);
IkReal x303=((5.6812e-8)*cj4);
IkReal x304=((1.0)*sj1);
IkReal x305=(cj0*r00);
IkReal x306=((0.02528477089996)*cj4);
IkReal x307=(py*sj0);
IkReal x308=((0.0965)*r02);
IkReal x309=((2.0)*pz);
IkReal x310=(cj0*sj1);
IkReal x311=(pz*r01);
IkReal x312=(px*r01);
IkReal x313=((0.28406)*r02);
IkReal x314=(cj1*r02);
IkReal x315=((0.01506027089996)*sj3);
IkReal x316=(cj0*py);
IkReal x317=(r02*sj1);
IkReal x318=(px*sj0);
IkReal x319=((0.0178444584)*sj1);
IkReal x320=((0.013705895)*sj1);
IkReal x321=(cj1*py);
IkReal x322=((0.0965)*pz);
IkReal x323=((0.013705895)*cj1);
IkReal x324=((0.0178444584)*cj1);
IkReal x325=(px*r00);
IkReal x326=(py*r01);
IkReal x327=(r00*sj0);
IkReal x328=((0.28406)*pz);
IkReal x329=(cj0*r01);
IkReal x330=(cj3*x295);
IkReal x331=(cj0*px*r02);
IkReal x332=(pz*x327);
IkReal x333=(cj3*x294);
IkReal x334=((0.14203)*x295);
IkReal x335=(cj4*x294);
IkReal x336=(cj1*x325);
IkReal x337=((2.0e-7)*x295);
IkReal x338=(sj3*x294);
IkReal x339=((2.0e-7)*x294);
IkReal x340=(sj3*x295);
IkReal x341=(cj4*x295);
IkReal x342=(sj1*x298);
IkReal x343=((0.14203)*x294);
IkReal x344=(r02*x298);
evalcond[0]=(((sj3*x335))+((sj1*x299))+x314+((cj4*x330))+((sj1*x305)));
evalcond[1]=((((-1.0)*x301*x305))+x317+(((-1.0)*x299*x301))+((cj4*x333))+(((-1.0)*cj4*x340)));
evalcond[2]=((-0.14203)+(((0.0715)*x338))+(((0.0715)*x330))+((cj1*pz))+x334+(((-1.0)*x339))+((px*x310))+((sj0*x300)));
evalcond[3]=((0.04825)+(((-1.0)*x301*x307))+(((0.0715)*x333))+(((-1.0)*cj0*px*x301))+x337+x343+(((-0.0715)*x340))+((pz*sj1)));
evalcond[4]=((((-1.0)*r02*x301*x318))+(((-1.0)*sj4*x339))+(((-1.0)*cj0*x301*x311))+((cj1*x332))+((x302*x330))+((x302*x338))+((sj4*x334))+(((-1.0)*x304*x312))+(((-0.14203)*x327))+((x314*x316))+((r00*x300))+(((0.14203)*x329)));
evalcond[5]=(((x317*x318))+((x310*x311))+(((-1.0)*sj4*x337))+(((-0.04825)*x327))+((r00*x321))+((x302*x340))+(((-1.0)*x302*x333))+(((-1.0)*cj0*r02*x300))+(((-1.0)*x304*x332))+(((-1.0)*sj4*x343))+(((-1.0)*x301*x312))+(((0.04825)*x329)));
evalcond[6]=((((-2.86e-8)*x341))+(((-1.0)*x299*x324))+((x297*x317))+(((0.013705895)*x314))+((x296*x317))+(((-1.0)*x298*x299*x301))+((x305*x320))+((x305*x328))+(((-1.0)*x315*x341))+(((2.0)*cj1*x312*x316))+(((-1.0)*x303*x330))+((x303*x338))+((x307*x309*x314))+(((-0.02031029)*x335))+((cj1*x296*x299))+(((-0.0965)*x326))+(((-0.0965)*x325))+(((-1.0)*x304*x344))+(((2.0)*x307*x336))+(((-1.0)*pz*x308))+((cj1*x297*x305))+(((-1.0)*x306*x333))+(((-1.0)*r01*x300*x309))+(((-1.0)*x296*x301*x305))+(((-1.0)*x298*x301*x305))+(((0.0178444584)*x317))+(((-1.0)*x307*x313))+((x299*x328))+((x299*x320))+(((-1.0)*cj0*px*x313))+(((-1.0)*x297*x299*x301))+((cj0*px*x309*x314))+(((-1.0)*sj1*x309*x325))+(((-1.0)*x305*x324)));
evalcond[7]=((((-1.0)*x296*x299*x304))+(((-2.0)*r00*x300*x318))+(((-1.0)*x299*x323))+((x297*x314))+(((-0.0178444584)*x314))+(((0.013705895)*x317))+(((-1.0)*r02*sj0*x300*x309))+((x296*x314))+((x305*x322))+(((-1.0)*px*r02*x309*x310))+(((-1.0)*x301*x344))+(((2.86e-8)*x335))+(((-1.0)*r01*x309*x321))+((x305*x342))+((sj1*x297*x299))+(((-1.0)*cj0*px*x308))+((x299*x342))+((x303*x333))+(((-1.0)*x305*x319))+((sj1*x296*x305))+(((-1.0)*x299*x319))+((x315*x335))+(((-1.0)*x306*x330))+((pz*x313))+(((-0.02031029)*x341))+(((-1.0)*x307*x308))+((x299*x322))+((x303*x340))+(((-1.0)*x309*x336))+(((-1.0)*x305*x323))+(((-2.0)*cj0*x300*x312))+(((0.28406)*x325))+(((0.28406)*x326))+(((-1.0)*x297*x304*x305)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x345=((0.0715)*cj3);
IkReal x346=((0.0715)*sj3);
IkReal x347=(cj0*sj1);
IkReal x348=(cj1*r02);
IkReal x349=(cj4*sj3);
IkReal x350=(cj1*pz);
IkReal x351=(cj3*cj4);
IkReal x352=((0.14203)*x349);
IkReal x353=(r01*sj0*sj1);
IkReal x354=((1.0)*x351);
IkReal x355=(py*sj0*sj1);
CheckValue<IkReal> x356=IKPowWithIntegerCheck(IKsign(((((-2.0e-7)*x351))+(((-1.0)*x352)))),-1);
if(!x356.valid){
continue;
}
CheckValue<IkReal> x357 = IKatan2WithCheck(IkReal(((((2.0e-7)*r00*x347))+(((-1.0)*x352))+(((-1.0)*x346*x353))+(((-1.0)*r00*x346*x347))+((x349*x350))+((x349*x355))+(((-1.0)*x346*x348))+((px*x347*x349))+(((2.0e-7)*x348))+(((2.0e-7)*x353)))),IkReal((((r00*x345*x347))+((x345*x353))+((x345*x348))+(((-1.0)*px*x347*x354))+(((0.14203)*r00*x347))+(((-1.0)*x354*x355))+(((0.14203)*x348))+(((0.14203)*x353))+(((0.14203)*x351))+(((-1.0)*x350*x354)))),IKFAST_ATAN2_MAGTHRESH);
if(!x357.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x356.value)))+(x357.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x358=IKcos(j2);
IkReal x359=IKsin(j2);
IkReal x360=py*py;
IkReal x361=px*px;
IkReal x362=pz*pz;
IkReal x363=(r01*sj0);
IkReal x364=(py*sj1);
IkReal x365=((1.0)*cj1);
IkReal x366=((0.0715)*sj4);
IkReal x367=((5.6812e-8)*cj4);
IkReal x368=((1.0)*sj1);
IkReal x369=(cj0*r00);
IkReal x370=((0.02528477089996)*cj4);
IkReal x371=(py*sj0);
IkReal x372=((0.0965)*r02);
IkReal x373=((2.0)*pz);
IkReal x374=(cj0*sj1);
IkReal x375=(pz*r01);
IkReal x376=(px*r01);
IkReal x377=((0.28406)*r02);
IkReal x378=(cj1*r02);
IkReal x379=((0.01506027089996)*sj3);
IkReal x380=(cj0*py);
IkReal x381=(r02*sj1);
IkReal x382=(px*sj0);
IkReal x383=((0.0178444584)*sj1);
IkReal x384=((0.013705895)*sj1);
IkReal x385=(cj1*py);
IkReal x386=((0.0965)*pz);
IkReal x387=((0.013705895)*cj1);
IkReal x388=((0.0178444584)*cj1);
IkReal x389=(px*r00);
IkReal x390=(py*r01);
IkReal x391=(r00*sj0);
IkReal x392=((0.28406)*pz);
IkReal x393=(cj0*r01);
IkReal x394=(cj3*x359);
IkReal x395=(cj0*px*r02);
IkReal x396=(pz*x391);
IkReal x397=(cj3*x358);
IkReal x398=((0.14203)*x359);
IkReal x399=(cj4*x358);
IkReal x400=(cj1*x389);
IkReal x401=((2.0e-7)*x359);
IkReal x402=(sj3*x358);
IkReal x403=((2.0e-7)*x358);
IkReal x404=(sj3*x359);
IkReal x405=(cj4*x359);
IkReal x406=(sj1*x362);
IkReal x407=((0.14203)*x358);
IkReal x408=(r02*x362);
evalcond[0]=(((sj1*x363))+((sj1*x369))+((cj4*x394))+x378+((sj3*x399)));
evalcond[1]=((((-1.0)*x363*x365))+((cj4*x397))+x381+(((-1.0)*cj4*x404))+(((-1.0)*x365*x369)));
evalcond[2]=((-0.14203)+(((0.0715)*x402))+((sj0*x364))+((cj1*pz))+((px*x374))+x398+(((0.0715)*x394))+(((-1.0)*x403)));
evalcond[3]=((0.04825)+(((-0.0715)*x404))+(((-1.0)*cj0*px*x365))+x401+x407+((pz*sj1))+(((0.0715)*x397))+(((-1.0)*x365*x371)));
evalcond[4]=(((x378*x380))+(((-1.0)*x368*x376))+(((-1.0)*cj0*x365*x375))+((r00*x364))+((x366*x394))+(((-1.0)*sj4*x403))+((x366*x402))+(((0.14203)*x393))+(((-0.14203)*x391))+(((-1.0)*r02*x365*x382))+((cj1*x396))+((sj4*x398)));
evalcond[5]=((((-1.0)*x368*x396))+(((0.04825)*x393))+(((-1.0)*sj4*x407))+(((-1.0)*sj4*x401))+(((-1.0)*x366*x397))+((x366*x404))+(((-1.0)*cj0*r02*x364))+((x374*x375))+((r00*x385))+((x381*x382))+(((-0.04825)*x391))+(((-1.0)*x365*x376)));
evalcond[6]=((((-0.0965)*x390))+((cj0*px*x373*x378))+(((-1.0)*x368*x408))+(((-1.0)*x369*x388))+(((-1.0)*cj0*px*x377))+(((-2.86e-8)*x405))+((x361*x381))+(((-1.0)*x370*x397))+((x369*x392))+((x363*x384))+(((-1.0)*x379*x405))+(((2.0)*cj1*x376*x380))+((x360*x381))+(((0.0178444584)*x381))+(((0.013705895)*x378))+((x367*x402))+(((-0.0965)*x389))+(((-1.0)*x362*x363*x365))+(((2.0)*x371*x400))+(((-1.0)*x361*x363*x365))+(((-1.0)*sj1*x373*x389))+(((-1.0)*x363*x388))+(((-1.0)*x371*x377))+(((-1.0)*x367*x394))+(((-1.0)*pz*x372))+(((-1.0)*x362*x365*x369))+((x363*x392))+((x371*x373*x378))+((x369*x384))+(((-1.0)*r01*x364*x373))+(((-1.0)*x360*x365*x369))+((cj1*x360*x363))+(((-0.02031029)*x399))+((cj1*x361*x369)));
evalcond[7]=((((-1.0)*x373*x400))+((x367*x397))+((x379*x399))+(((0.013705895)*x381))+(((-1.0)*r01*x373*x385))+(((-1.0)*x369*x383))+(((-1.0)*x369*x387))+(((-1.0)*cj0*px*x372))+((x363*x406))+(((-1.0)*x370*x394))+(((-1.0)*x365*x408))+(((-0.0178444584)*x378))+((x363*x386))+(((-2.0)*cj0*x364*x376))+(((-1.0)*r02*sj0*x364*x373))+((x367*x404))+(((0.28406)*x389))+(((-0.02031029)*x405))+(((-1.0)*px*r02*x373*x374))+((pz*x377))+(((-1.0)*x361*x368*x369))+(((-2.0)*r00*x364*x382))+(((-1.0)*x363*x383))+(((-1.0)*x363*x387))+(((-1.0)*x371*x372))+(((-1.0)*x360*x363*x368))+((sj1*x361*x363))+((x369*x406))+((x360*x378))+((sj1*x360*x369))+(((2.86e-8)*x399))+((x369*x386))+(((0.28406)*x390))+((x361*x378)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x409=((1.0)*sj1);
IkReal x410=((1.0)*sj3);
IkReal x411=(cj3*r02);
IkReal x412=(r01*sj0);
IkReal x413=(cj0*r00);
IkReal x414=(cj3*x412);
IkReal x415=(cj1*x413);
CheckValue<IkReal> x416 = IKatan2WithCheck(IkReal(((((-1.0)*cj3*x409*x413))+(((-1.0)*cj1*x411))+(((-1.0)*cj1*x410*x412))+(((-1.0)*x410*x415))+((r02*sj1*sj3))+(((-1.0)*x409*x414)))),IkReal(((((-1.0)*sj3*x409*x412))+(((-1.0)*sj3*x409*x413))+(((-1.0)*cj1*r02*x410))+((cj1*x414))+((cj3*x415))+(((-1.0)*x409*x411)))),IKFAST_ATAN2_MAGTHRESH);
if(!x416.valid){
continue;
}
CheckValue<IkReal> x417=IKPowWithIntegerCheck(IKsign(cj4),-1);
if(!x417.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x416.value)+(((1.5707963267949)*(x417.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x418=IKcos(j2);
IkReal x419=IKsin(j2);
IkReal x420=py*py;
IkReal x421=px*px;
IkReal x422=pz*pz;
IkReal x423=(r01*sj0);
IkReal x424=(py*sj1);
IkReal x425=((1.0)*cj1);
IkReal x426=((0.0715)*sj4);
IkReal x427=((5.6812e-8)*cj4);
IkReal x428=((1.0)*sj1);
IkReal x429=(cj0*r00);
IkReal x430=((0.02528477089996)*cj4);
IkReal x431=(py*sj0);
IkReal x432=((0.0965)*r02);
IkReal x433=((2.0)*pz);
IkReal x434=(cj0*sj1);
IkReal x435=(pz*r01);
IkReal x436=(px*r01);
IkReal x437=((0.28406)*r02);
IkReal x438=(cj1*r02);
IkReal x439=((0.01506027089996)*sj3);
IkReal x440=(cj0*py);
IkReal x441=(r02*sj1);
IkReal x442=(px*sj0);
IkReal x443=((0.0178444584)*sj1);
IkReal x444=((0.013705895)*sj1);
IkReal x445=(cj1*py);
IkReal x446=((0.0965)*pz);
IkReal x447=((0.013705895)*cj1);
IkReal x448=((0.0178444584)*cj1);
IkReal x449=(px*r00);
IkReal x450=(py*r01);
IkReal x451=(r00*sj0);
IkReal x452=((0.28406)*pz);
IkReal x453=(cj0*r01);
IkReal x454=(cj3*x419);
IkReal x455=(cj0*px*r02);
IkReal x456=(pz*x451);
IkReal x457=(cj3*x418);
IkReal x458=((0.14203)*x419);
IkReal x459=(cj4*x418);
IkReal x460=(cj1*x449);
IkReal x461=((2.0e-7)*x419);
IkReal x462=(sj3*x418);
IkReal x463=((2.0e-7)*x418);
IkReal x464=(sj3*x419);
IkReal x465=(cj4*x419);
IkReal x466=(sj1*x422);
IkReal x467=((0.14203)*x418);
IkReal x468=(r02*x422);
evalcond[0]=(((sj3*x459))+((cj4*x454))+x438+((sj1*x423))+((sj1*x429)));
evalcond[1]=(((cj4*x457))+(((-1.0)*cj4*x464))+x441+(((-1.0)*x425*x429))+(((-1.0)*x423*x425)));
evalcond[2]=((-0.14203)+((px*x434))+(((-1.0)*x463))+((cj1*pz))+x458+(((0.0715)*x454))+(((0.0715)*x462))+((sj0*x424)));
evalcond[3]=((0.04825)+(((-0.0715)*x464))+x461+x467+(((-1.0)*x425*x431))+((pz*sj1))+(((-1.0)*cj0*px*x425))+(((0.0715)*x457)));
evalcond[4]=((((-1.0)*sj4*x463))+((cj1*x456))+((x426*x454))+((x426*x462))+(((0.14203)*x453))+(((-1.0)*cj0*x425*x435))+((sj4*x458))+((r00*x424))+(((-1.0)*r02*x425*x442))+((x438*x440))+(((-1.0)*x428*x436))+(((-0.14203)*x451)));
evalcond[5]=((((-0.04825)*x451))+(((-1.0)*cj0*r02*x424))+(((-1.0)*sj4*x467))+(((-1.0)*sj4*x461))+((x434*x435))+(((0.04825)*x453))+(((-1.0)*x428*x456))+((x426*x464))+((x441*x442))+((r00*x445))+(((-1.0)*x425*x436))+(((-1.0)*x426*x457)));
evalcond[6]=(((x423*x452))+((x421*x441))+(((2.0)*cj1*x436*x440))+((x431*x433*x438))+(((-1.0)*x431*x437))+(((-1.0)*x439*x465))+(((-1.0)*x422*x423*x425))+(((-1.0)*r01*x424*x433))+(((-0.02031029)*x459))+(((-1.0)*x420*x425*x429))+(((0.013705895)*x438))+(((-1.0)*x429*x448))+((x429*x452))+(((-1.0)*x428*x468))+(((-0.0965)*x450))+(((-0.0965)*x449))+(((-1.0)*x421*x423*x425))+(((-1.0)*x422*x425*x429))+((cj0*px*x433*x438))+((x423*x444))+(((-1.0)*pz*x432))+(((0.0178444584)*x441))+((x427*x462))+((cj1*x420*x423))+(((-1.0)*x430*x457))+(((-1.0)*x423*x448))+((cj1*x421*x429))+(((-1.0)*sj1*x433*x449))+(((-2.86e-8)*x465))+((x429*x444))+(((2.0)*x431*x460))+(((-1.0)*x427*x454))+((x420*x441))+(((-1.0)*cj0*px*x437)));
evalcond[7]=((((-1.0)*r01*x433*x445))+((sj1*x420*x429))+((x421*x438))+((x423*x466))+(((-1.0)*px*r02*x433*x434))+((sj1*x421*x423))+(((-2.0)*r00*x424*x442))+(((-1.0)*x431*x432))+(((-2.0)*cj0*x424*x436))+(((0.28406)*x450))+(((-0.0178444584)*x438))+((pz*x437))+(((-0.02031029)*x465))+((x429*x466))+(((-1.0)*x429*x447))+(((-1.0)*x429*x443))+(((0.013705895)*x441))+(((-1.0)*x421*x428*x429))+(((-1.0)*x433*x460))+((x423*x446))+(((2.86e-8)*x459))+(((0.28406)*x449))+(((-1.0)*x420*x423*x428))+((x427*x464))+((x427*x457))+((x439*x459))+(((-1.0)*x425*x468))+(((-1.0)*x430*x454))+(((-1.0)*x423*x447))+(((-1.0)*x423*x443))+((x420*x438))+(((-1.0)*r02*sj0*x424*x433))+((x429*x446))+(((-1.0)*cj0*px*x432)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
    }
}
}

}

}
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - widowx_arm (3976120831c38668b4d44fabba652d26)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
